
SiRadioRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00000a48  00000adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  0080020e  0080020e  00000bea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000340e  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d8  00000000  00000000  0000429a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fca  00000000  00000000  00005372  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000804  00000000  00000000  0000633c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf9  00000000  00000000  00006b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029f9  00000000  00000000  00007839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000a232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	56 01       	movw	r10, r12

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e8 e4       	ldi	r30, 0x48	; 72
  7e:	fa e0       	ldi	r31, 0x0A	; 10
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ae 30       	cpi	r26, 0x0E	; 14
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	ae e0       	ldi	r26, 0x0E	; 14
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 3a       	cpi	r26, 0xA4	; 164
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 1c 05 	call	0xa38	; 0xa38 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  b6:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_1>:

IntStatus its;
ubyte rxFifoBuff[64];

ISR(INT0_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	cf 92       	push	r12
  ca:	ef 92       	push	r14
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <__vector_1+0x30>
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	bool rxDone = false;
	if(radio.GetIntStatus(0,0,0,&its))
  f2:	0e e4       	ldi	r16, 0x4E	; 78
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	8a e5       	ldi	r24, 0x5A	; 90
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	0e 94 80 03 	call	0x700	; 0x700 <_ZN6Si446312GetIntStatusEhhhP9IntStatus>
 104:	88 23       	and	r24, r24
 106:	09 f4       	brne	.+2      	; 0x10a <__vector_1+0x4c>
 108:	44 c0       	rjmp	.+136    	; 0x192 <__vector_1+0xd4>
	{
		ubyte rssi = 0;
		if(its.phPend & PH_INT_RX_ACTION_MASK)
 10a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <its+0x2>
 10e:	88 71       	andi	r24, 0x18	; 24
 110:	39 f0       	breq	.+14     	; 0x120 <__vector_1+0x62>
		{
			rssi = radio.ReadFrrA(); // RSSI
 112:	8a e5       	ldi	r24, 0x5A	; 90
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN6Si44638ReadFrrAEv>
 11a:	08 2f       	mov	r16, r24
			rxDone = true;
 11c:	11 e0       	ldi	r17, 0x01	; 1
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__vector_1+0x66>
ISR(INT0_vect)
{
	bool rxDone = false;
	if(radio.GetIntStatus(0,0,0,&its))
	{
		ubyte rssi = 0;
 120:	00 e0       	ldi	r16, 0x00	; 0
IntStatus its;
ubyte rxFifoBuff[64];

ISR(INT0_vect)
{
	bool rxDone = false;
 122:	10 e0       	ldi	r17, 0x00	; 0
		{
			rssi = radio.ReadFrrA(); // RSSI
			rxDone = true;
		}

		if(its.phPend & PH_INT_PACKET_RX)
 124:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <its+0x2>
 128:	94 ff       	sbrs	r25, 4
 12a:	18 c0       	rjmp	.+48     	; 0x15c <__vector_1+0x9e>
		{
			FifoInfo fi;
			radio.GetFifoInfo(&fi);
 12c:	be 01       	movw	r22, r28
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	8a e5       	ldi	r24, 0x5A	; 90
 134:	92 e0       	ldi	r25, 0x02	; 2
 136:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN6Si446311GetFifoInfoEP8FifoInfo>
			if(fi.rxFifoCount > 0)
 13a:	49 81       	ldd	r20, Y+1	; 0x01
 13c:	44 23       	and	r20, r20
 13e:	71 f0       	breq	.+28     	; 0x15c <__vector_1+0x9e>
			{
				radio.ReadRx(rxFifoBuff, fi.rxFifoCount);
 140:	6e e0       	ldi	r22, 0x0E	; 14
 142:	72 e0       	ldi	r23, 0x02	; 2
 144:	8a e5       	ldi	r24, 0x5A	; 90
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN6Si44636ReadRxEPhh>
				serMan.RxMsg(rssi, rxFifoBuff, fi.rxFifoCount);
 14c:	29 81       	ldd	r18, Y+1	; 0x01
 14e:	4e e0       	ldi	r20, 0x0E	; 14
 150:	52 e0       	ldi	r21, 0x02	; 2
 152:	60 2f       	mov	r22, r16
 154:	86 e5       	ldi	r24, 0x56	; 86
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN13SerialManager5RxMsgEhPhh>
			}
		}
		
		if(its.phPend & PH_INT_CRC_ERROR)
 15c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <its+0x2>
 160:	83 ff       	sbrs	r24, 3
 162:	04 c0       	rjmp	.+8      	; 0x16c <__vector_1+0xae>
		{
			serMan.CrcMsg();
 164:	86 e5       	ldi	r24, 0x56	; 86
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN13SerialManager6CrcMsgEv>
		}

		if(rxDone) radio.StartRx(0, 0, 0, 0, 3, 8);
 16c:	11 23       	and	r17, r17
 16e:	b1 f0       	breq	.+44     	; 0x19c <__vector_1+0xde>
 170:	68 94       	set
 172:	cc 24       	eor	r12, r12
 174:	c3 f8       	bld	r12, 3
 176:	0f 2e       	mov	r0, r31
 178:	f3 e0       	ldi	r31, 0x03	; 3
 17a:	ef 2e       	mov	r14, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	8a e5       	ldi	r24, 0x5A	; 90
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN6Si44637StartRxEhhihhh>
 190:	05 c0       	rjmp	.+10     	; 0x19c <__vector_1+0xde>
	} else serMan.Msg(MSG_GET_INT_ERROR);
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	86 e5       	ldi	r24, 0x56	; 86
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	0e 94 98 01 	call	0x330	; 0x330 <_ZN13SerialManager3MsgEh>
}
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ef 90       	pop	r14
 1c2:	cf 90       	pop	r12
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <_Z18EnableExtInterruptv>:

void EnableExtInterrupt()
{
	// INT0, falling edge
	DDRD &= ~(1<<2);
 1ce:	52 98       	cbi	0x0a, 2	; 10
	EICRA = 2;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8d bb       	out	0x1d, r24	; 29
 1da:	08 95       	ret

000001dc <main>:
}

int main(void)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <main+0x6>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <main+0x8>
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<1) | (1<<2);
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	86 60       	ori	r24, 0x06	; 6
 1ee:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<1;
 1f0:	29 9a       	sbi	0x05, 1	; 5

	UsartInit();
 1f2:	0e 94 a8 04 	call	0x950	; 0x950 <_Z9UsartInitv>

	char c;
	while(!UsartRead(&c));
 1f6:	ce 01       	movw	r24, r28
 1f8:	05 96       	adiw	r24, 0x05	; 5
 1fa:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z9UsartReadPc>
 1fe:	88 23       	and	r24, r24
 200:	d1 f3       	breq	.-12     	; 0x1f6 <main+0x1a>
    bool result = radio.Init();
 202:	8a e5       	ldi	r24, 0x5A	; 90
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	0e 94 93 02 	call	0x526	; 0x526 <_ZN6Si44634InitEv>
 20a:	18 2f       	mov	r17, r24
	
	serMan.InitMsg(result);
 20c:	68 2f       	mov	r22, r24
 20e:	86 e5       	ldi	r24, 0x56	; 86
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN13SerialManager7InitMsgEb>
	if(!result) while(1);
 216:	11 11       	cpse	r17, r1
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0x40>
 21a:	ff cf       	rjmp	.-2      	; 0x21a <main+0x3e>

	EnableExtInterrupt();
 21c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z18EnableExtInterruptv>

	radio.SetProperty(PKT_CRC_CONFIG, CRC_32_IEEE); // CRC polynomial config
 220:	47 e0       	ldi	r20, 0x07	; 7
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	72 e1       	ldi	r23, 0x12	; 18
 226:	8a e5       	ldi	r24, 0x5A	; 90
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN6Si446311SetPropertyEih>

	PacketField packet1;
	packet1.SetConfig(false, false, false, false);
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN11PacketField9SetConfigEbbbb>
	packet1.SetCrcConfig(true, true, true, true);
 23e:	01 e0       	ldi	r16, 0x01	; 1
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	0e 94 82 01 	call	0x304	; 0x304 <_ZN11PacketField12SetCrcConfigEbbbb>
	packet1.SetLength(11);
 24e:	6b e0       	ldi	r22, 0x0B	; 11
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN11PacketField9SetLengthEi>

	radio.SetProperty(PKT_FIELD_1_LENGTH_12_8, 4, packet1.data);
 25a:	9e 01       	movw	r18, r28
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	44 e0       	ldi	r20, 0x04	; 4
 262:	6d e0       	ldi	r22, 0x0D	; 13
 264:	72 e1       	ldi	r23, 0x12	; 18
 266:	8a e5       	ldi	r24, 0x5A	; 90
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN6Si446311SetPropertyEihPh>

	radio.SetProperty(MODEM_RSSI_CONTROL, 1); // RSSI
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	6c e4       	ldi	r22, 0x4C	; 76
 272:	70 e2       	ldi	r23, 0x20	; 32
 274:	8a e5       	ldi	r24, 0x5A	; 90
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN6Si446311SetPropertyEih>
	radio.SetProperty(FRR_CTL_A_MODE, 10); // FRR A = latched RSSI
 27c:	4a e0       	ldi	r20, 0x0A	; 10
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	72 e0       	ldi	r23, 0x02	; 2
 282:	8a e5       	ldi	r24, 0x5A	; 90
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN6Si446311SetPropertyEih>

	radio.StartRx(0, 0, 0, 0, 3, 8);
 28a:	68 94       	set
 28c:	cc 24       	eor	r12, r12
 28e:	c3 f8       	bld	r12, 3
 290:	0f 2e       	mov	r0, r31
 292:	f3 e0       	ldi	r31, 0x03	; 3
 294:	ef 2e       	mov	r14, r31
 296:	f0 2d       	mov	r31, r0
 298:	00 e0       	ldi	r16, 0x00	; 0
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	8a e5       	ldi	r24, 0x5A	; 90
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN6Si44637StartRxEhhihhh>

	while (1);
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <main+0xce>

000002ac <_GLOBAL__sub_I_radio>:
}
 2ac:	0f 93       	push	r16
#include "Si4463.h"
#include "PacketField.h"
#include "CrcConfig.h"
#include "SerialManager.h"

Si4463 radio(&PORTB, 1, &PORTB, 2);
 2ae:	02 e0       	ldi	r16, 0x02	; 2
 2b0:	25 e2       	ldi	r18, 0x25	; 37
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	65 e2       	ldi	r22, 0x25	; 37
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	8a e5       	ldi	r24, 0x5A	; 90
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN6Si4463C1EPVhhS1_h>
#define MSG_CRC_ERROR 2
#define MSG_PACKET_RX 3
#define MSG_GET_FIFO_ERR 4
#define MSG_GET_INT_ERROR 5

class SerialManager
 2c2:	e6 e5       	ldi	r30, 0x56	; 86
 2c4:	f2 e0       	ldi	r31, 0x02	; 2
 2c6:	8e ed       	ldi	r24, 0xDE	; 222
 2c8:	80 83       	st	Z, r24
 2ca:	8d ea       	ldi	r24, 0xAD	; 173
 2cc:	81 83       	std	Z+1, r24	; 0x01
 2ce:	12 82       	std	Z+2, r1	; 0x02
 2d0:	13 82       	std	Z+3, r1	; 0x03
	radio.SetProperty(FRR_CTL_A_MODE, 10); // FRR A = latched RSSI

	radio.StartRx(0, 0, 0, 0, 3, 8);

	while (1);
}
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <_ZN11PacketField9SetLengthEi>:

 #include "PacketField.h"

 void PacketField::SetLength(int len)
 {
	data[0] = len >> 8;
 2d6:	fc 01       	movw	r30, r24
 2d8:	70 83       	st	Z, r23
	data[1] = len & 0xFF;
 2da:	61 83       	std	Z+1, r22	; 0x01
 2dc:	08 95       	ret

000002de <_ZN11PacketField9SetConfigEbbbb>:
 }

 void PacketField::SetConfig(bool manch, bool whiten, bool pnStart, bool qfsk)
 {
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	30 2f       	mov	r19, r16
	data[2] = (manch) | (whiten<<1) | (pnStart<<2) | (qfsk<<4);
 2e4:	02 2f       	mov	r16, r18
 2e6:	00 0f       	add	r16, r16
 2e8:	00 0f       	add	r16, r16
 2ea:	60 2b       	or	r22, r16
 2ec:	20 e1       	ldi	r18, 0x10	; 16
 2ee:	32 9f       	mul	r19, r18
 2f0:	80 01       	movw	r16, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	06 2b       	or	r16, r22
 2f6:	44 0f       	add	r20, r20
 2f8:	04 2b       	or	r16, r20
 2fa:	fc 01       	movw	r30, r24
 2fc:	02 83       	std	Z+2, r16	; 0x02
 }
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <_ZN11PacketField12SetCrcConfigEbbbb>:

 void PacketField::SetCrcConfig(bool crcEnable, bool checkCrc, bool sendCrc, bool crcStart)
 {
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
	data[3] = (crcEnable<<1) | (checkCrc<<3) | (sendCrc<<5) | (crcStart<<7);
 308:	30 e2       	ldi	r19, 0x20	; 32
 30a:	23 9f       	mul	r18, r19
 30c:	f0 01       	movw	r30, r0
 30e:	11 24       	eor	r1, r1
 310:	20 e8       	ldi	r18, 0x80	; 128
 312:	02 9f       	mul	r16, r18
 314:	80 01       	movw	r16, r0
 316:	11 24       	eor	r1, r1
 318:	0e 2b       	or	r16, r30
 31a:	44 0f       	add	r20, r20
 31c:	44 0f       	add	r20, r20
 31e:	44 0f       	add	r20, r20
 320:	04 2b       	or	r16, r20
 322:	66 0f       	add	r22, r22
 324:	60 2b       	or	r22, r16
 326:	fc 01       	movw	r30, r24
 328:	63 83       	std	Z+3, r22	; 0x03
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <_ZN13SerialManager3MsgEh>:

 #include "SerialManager.h"

 void SerialManager::Msg(ubyte msg)
 {
	basicBuff[2] = 1;
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	fc 01       	movw	r30, r24
 334:	22 83       	std	Z+2, r18	; 0x02
	basicBuff[3] = msg;
 336:	63 83       	std	Z+3, r22	; 0x03
 338:	08 95       	ret

0000033a <_ZN13SerialManager7InitMsgEb>:
 }

 void SerialManager::InitMsg(bool ok)
 {
	basicBuff[2] = 1;
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	fc 01       	movw	r30, r24
 33e:	22 83       	std	Z+2, r18	; 0x02
	basicBuff[3] = ok;
 340:	63 83       	std	Z+3, r22	; 0x03
	UsartSend((char*)basicBuff, 4);
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9UsartSendPci>
 34a:	08 95       	ret

0000034c <_ZN13SerialManager6CrcMsgEv>:
 }

 void SerialManager::CrcMsg()
 {
	basicBuff[2] = 1;
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	fc 01       	movw	r30, r24
 350:	22 83       	std	Z+2, r18	; 0x02
	basicBuff[3] = 2;
 352:	22 e0       	ldi	r18, 0x02	; 2
 354:	23 83       	std	Z+3, r18	; 0x03
	UsartSend((char*)basicBuff, 4);
 356:	64 e0       	ldi	r22, 0x04	; 4
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9UsartSendPci>
 35e:	08 95       	ret

00000360 <_ZN13SerialManager5RxMsgEhPhh>:
 }

 void SerialManager::RxMsg(ubyte rssi, ubyte* payload, ubyte len)
 {
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	fc 01       	movw	r30, r24
 36a:	d6 2f       	mov	r29, r22
 36c:	8a 01       	movw	r16, r20
 36e:	c2 2f       	mov	r28, r18
	basicBuff[2] = len + 2;
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	82 0f       	add	r24, r18
 374:	82 83       	std	Z+2, r24	; 0x02
	basicBuff[3] = 3;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	83 83       	std	Z+3, r24	; 0x03
	UsartSend((char*)basicBuff, 4);
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	cf 01       	movw	r24, r30
 380:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9UsartSendPci>
	UsartSend((char)rssi);
 384:	8d 2f       	mov	r24, r29
 386:	0e 94 b9 04 	call	0x972	; 0x972 <_Z9UsartSendc>
	UsartSend((char*)payload, len);
 38a:	6c 2f       	mov	r22, r28
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	c8 01       	movw	r24, r16
 390:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9UsartSendPci>
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <_ZN6Si4463C1EPVhhS1_h>:
}

bool Si4463::GetPowerLevel(ubyte* lvl)
{
	return GetProperty(PA_PWR_LVL, lvl);
}
 39e:	0f 93       	push	r16
 3a0:	fc 01       	movw	r30, r24
 3a2:	73 83       	std	Z+3, r23	; 0x03
 3a4:	62 83       	std	Z+2, r22	; 0x02
 3a6:	46 83       	std	Z+6, r20	; 0x06
 3a8:	35 83       	std	Z+5, r19	; 0x05
 3aa:	24 83       	std	Z+4, r18	; 0x04
 3ac:	07 83       	std	Z+7, r16	; 0x07
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <_ZN6Si44635ResetEv>:
 3b2:	fc 01       	movw	r30, r24
 3b4:	a4 81       	ldd	r26, Z+4	; 0x04
 3b6:	b5 81       	ldd	r27, Z+5	; 0x05
 3b8:	4c 91       	ld	r20, X
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	c9 01       	movw	r24, r18
 3c0:	07 80       	ldd	r0, Z+7	; 0x07
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <_ZN6Si44635ResetEv+0x16>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <_ZN6Si44635ResetEv+0x12>
 3cc:	84 2b       	or	r24, r20
 3ce:	8c 93       	st	X, r24
 3d0:	85 e8       	ldi	r24, 0x85	; 133
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <_ZN6Si44635ResetEv+0x20>
 3d6:	00 00       	nop
 3d8:	a4 81       	ldd	r26, Z+4	; 0x04
 3da:	b5 81       	ldd	r27, Z+5	; 0x05
 3dc:	9c 91       	ld	r25, X
 3de:	a9 01       	movw	r20, r18
 3e0:	07 80       	ldd	r0, Z+7	; 0x07
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <_ZN6Si44635ResetEv+0x36>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <_ZN6Si44635ResetEv+0x32>
 3ec:	84 2f       	mov	r24, r20
 3ee:	80 95       	com	r24
 3f0:	89 23       	and	r24, r25
 3f2:	8c 93       	st	X, r24
 3f4:	a2 81       	ldd	r26, Z+2	; 0x02
 3f6:	b3 81       	ldd	r27, Z+3	; 0x03
 3f8:	8c 91       	ld	r24, X
 3fa:	06 80       	ldd	r0, Z+6	; 0x06
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <_ZN6Si44635ResetEv+0x4c>
 406:	28 2b       	or	r18, r24
 408:	2c 93       	st	X, r18
 40a:	08 95       	ret

0000040c <_ZN6Si446310WaitForCtsEv>:
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	ec 01       	movw	r28, r24
 41a:	00 e4       	ldi	r16, 0x40	; 64
 41c:	16 e0       	ldi	r17, 0x06	; 6
 41e:	ee 24       	eor	r14, r14
 420:	e3 94       	inc	r14
 422:	f1 2c       	mov	r15, r1
 424:	ea 81       	ldd	r30, Y+2	; 0x02
 426:	fb 81       	ldd	r31, Y+3	; 0x03
 428:	90 81       	ld	r25, Z
 42a:	97 01       	movw	r18, r14
 42c:	0e 80       	ldd	r0, Y+6	; 0x06
 42e:	02 c0       	rjmp	.+4      	; 0x434 <_ZN6Si446310WaitForCtsEv+0x28>
 430:	22 0f       	add	r18, r18
 432:	33 1f       	adc	r19, r19
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <_ZN6Si446310WaitForCtsEv+0x24>
 438:	82 2f       	mov	r24, r18
 43a:	80 95       	com	r24
 43c:	89 23       	and	r24, r25
 43e:	80 83       	st	Z, r24
 440:	84 e4       	ldi	r24, 0x44	; 68
 442:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 44c:	ea 81       	ldd	r30, Y+2	; 0x02
 44e:	fb 81       	ldd	r31, Y+3	; 0x03
 450:	90 81       	ld	r25, Z
 452:	97 01       	movw	r18, r14
 454:	0e 80       	ldd	r0, Y+6	; 0x06
 456:	02 c0       	rjmp	.+4      	; 0x45c <_ZN6Si446310WaitForCtsEv+0x50>
 458:	22 0f       	add	r18, r18
 45a:	33 1f       	adc	r19, r19
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <_ZN6Si446310WaitForCtsEv+0x4c>
 460:	29 2b       	or	r18, r25
 462:	20 83       	st	Z, r18
 464:	8f 3f       	cpi	r24, 0xFF	; 255
 466:	19 f0       	breq	.+6      	; 0x46e <_ZN6Si446310WaitForCtsEv+0x62>
 468:	01 50       	subi	r16, 0x01	; 1
 46a:	11 09       	sbc	r17, r1
 46c:	d9 f6       	brne	.-74     	; 0x424 <_ZN6Si446310WaitForCtsEv+0x18>
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	8f 3f       	cpi	r24, 0xFF	; 255
 472:	09 f0       	breq	.+2      	; 0x476 <_ZN6Si446310WaitForCtsEv+0x6a>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	89 2f       	mov	r24, r25
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <_ZN6Si44637SendCmdEPhh>:
 486:	bf 92       	push	r11
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	7c 01       	movw	r14, r24
 49a:	6b 01       	movw	r12, r22
 49c:	c4 2f       	mov	r28, r20
 49e:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN6Si446310WaitForCtsEv>
 4a2:	b8 2e       	mov	r11, r24
 4a4:	88 23       	and	r24, r24
 4a6:	a1 f1       	breq	.+104    	; 0x510 <_ZN6Si44637SendCmdEPhh+0x8a>
 4a8:	d7 01       	movw	r26, r14
 4aa:	12 96       	adiw	r26, 0x02	; 2
 4ac:	ed 91       	ld	r30, X+
 4ae:	fc 91       	ld	r31, X
 4b0:	13 97       	sbiw	r26, 0x03	; 3
 4b2:	20 81       	ld	r18, Z
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	16 96       	adiw	r26, 0x06	; 6
 4ba:	0c 90       	ld	r0, X
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <_ZN6Si44637SendCmdEPhh+0x3c>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <_ZN6Si44637SendCmdEPhh+0x38>
 4c6:	80 95       	com	r24
 4c8:	82 23       	and	r24, r18
 4ca:	80 83       	st	Z, r24
 4cc:	9f ef       	ldi	r25, 0xFF	; 255
 4ce:	9c 0f       	add	r25, r28
 4d0:	cc 23       	and	r28, r28
 4d2:	69 f0       	breq	.+26     	; 0x4ee <_ZN6Si44637SendCmdEPhh+0x68>
 4d4:	e6 01       	movw	r28, r12
 4d6:	09 2f       	mov	r16, r25
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	0f 5f       	subi	r16, 0xFF	; 255
 4dc:	1f 4f       	sbci	r17, 0xFF	; 255
 4de:	0c 0d       	add	r16, r12
 4e0:	1d 1d       	adc	r17, r13
 4e2:	89 91       	ld	r24, Y+
 4e4:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 4e8:	c0 17       	cp	r28, r16
 4ea:	d1 07       	cpc	r29, r17
 4ec:	d1 f7       	brne	.-12     	; 0x4e2 <_ZN6Si44637SendCmdEPhh+0x5c>
 4ee:	d7 01       	movw	r26, r14
 4f0:	12 96       	adiw	r26, 0x02	; 2
 4f2:	ed 91       	ld	r30, X+
 4f4:	fc 91       	ld	r31, X
 4f6:	13 97       	sbiw	r26, 0x03	; 3
 4f8:	80 81       	ld	r24, Z
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	16 96       	adiw	r26, 0x06	; 6
 500:	0c 90       	ld	r0, X
 502:	02 c0       	rjmp	.+4      	; 0x508 <_ZN6Si44637SendCmdEPhh+0x82>
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <_ZN6Si44637SendCmdEPhh+0x7e>
 50c:	28 2b       	or	r18, r24
 50e:	20 83       	st	Z, r18
 510:	8b 2d       	mov	r24, r11
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	cf 90       	pop	r12
 522:	bf 90       	pop	r11
 524:	08 95       	ret

00000526 <_ZN6Si44634InitEv>:
 526:	cf 92       	push	r12
 528:	df 92       	push	r13
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	6c 01       	movw	r12, r24
 536:	0e 94 9b 04 	call	0x936	; 0x936 <_Z13SpiMasterInitv>
 53a:	c6 01       	movw	r24, r12
 53c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN6Si44635ResetEv>
 540:	8f e1       	ldi	r24, 0x1F	; 31
 542:	9e e4       	ldi	r25, 0x4E	; 78
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <_ZN6Si44634InitEv+0x1e>
 548:	00 c0       	rjmp	.+0      	; 0x54a <_ZN6Si44634InitEv+0x24>
 54a:	00 00       	nop
 54c:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__data_start>
 550:	11 23       	and	r17, r17
 552:	49 f1       	breq	.+82     	; 0x5a6 <_ZN6Si44634InitEv+0x80>
 554:	e1 2c       	mov	r14, r1
 556:	f1 2c       	mov	r15, r1
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	e9 01       	movw	r28, r18
 55e:	21 96       	adiw	r28, 0x01	; 1
 560:	be 01       	movw	r22, r28
 562:	60 50       	subi	r22, 0x00	; 0
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	41 2f       	mov	r20, r17
 568:	c6 01       	movw	r24, r12
 56a:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6Si44637SendCmdEPhh>
 56e:	81 11       	cpse	r24, r1
 570:	04 c0       	rjmp	.+8      	; 0x57a <_ZN6Si44634InitEv+0x54>
 572:	f6 01       	movw	r30, r12
 574:	f1 82       	std	Z+1, r15	; 0x01
 576:	e0 82       	st	Z, r14
 578:	17 c0       	rjmp	.+46     	; 0x5a8 <_ZN6Si44634InitEv+0x82>
 57a:	e1 14       	cp	r14, r1
 57c:	f1 04       	cpc	r15, r1
 57e:	31 f4       	brne	.+12     	; 0x58c <_ZN6Si44634InitEv+0x66>
 580:	ef e1       	ldi	r30, 0x1F	; 31
 582:	fe e4       	ldi	r31, 0x4E	; 78
 584:	31 97       	sbiw	r30, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <_ZN6Si44634InitEv+0x5e>
 588:	00 c0       	rjmp	.+0      	; 0x58a <_ZN6Si44634InitEv+0x64>
 58a:	00 00       	nop
 58c:	ff ef       	ldi	r31, 0xFF	; 255
 58e:	ef 1a       	sub	r14, r31
 590:	ff 0a       	sbc	r15, r31
 592:	9e 01       	movw	r18, r28
 594:	21 0f       	add	r18, r17
 596:	31 1d       	adc	r19, r1
 598:	f9 01       	movw	r30, r18
 59a:	e0 50       	subi	r30, 0x00	; 0
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	10 81       	ld	r17, Z
 5a0:	11 11       	cpse	r17, r1
 5a2:	dc cf       	rjmp	.-72     	; 0x55c <_ZN6Si44634InitEv+0x36>
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <_ZN6Si44634InitEv+0x82>
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	cf 90       	pop	r12
 5b6:	08 95       	ret

000005b8 <_ZN6Si446311SetPropertyEihPh>:
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	60 97       	sbiw	r28, 0x10	; 16
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	8c 01       	movw	r16, r24
 5d2:	fe 01       	movw	r30, r28
 5d4:	31 96       	adiw	r30, 0x01	; 1
 5d6:	80 e1       	ldi	r24, 0x10	; 16
 5d8:	df 01       	movw	r26, r30
 5da:	1d 92       	st	X+, r1
 5dc:	8a 95       	dec	r24
 5de:	e9 f7       	brne	.-6      	; 0x5da <_ZN6Si446311SetPropertyEihPh+0x22>
 5e0:	81 e1       	ldi	r24, 0x11	; 17
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	7a 83       	std	Y+2, r23	; 0x02
 5e6:	4b 83       	std	Y+3, r20	; 0x03
 5e8:	6c 83       	std	Y+4, r22	; 0x04
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	84 0f       	add	r24, r20
 5ee:	44 23       	and	r20, r20
 5f0:	91 f0       	breq	.+36     	; 0x616 <_ZN6Si446311SetPropertyEihPh+0x5e>
 5f2:	a2 2f       	mov	r26, r18
 5f4:	b3 2f       	mov	r27, r19
 5f6:	34 96       	adiw	r30, 0x04	; 4
 5f8:	9e 01       	movw	r18, r28
 5fa:	28 0f       	add	r18, r24
 5fc:	31 1d       	adc	r19, r1
 5fe:	2a 5f       	subi	r18, 0xFA	; 250
 600:	3f 4f       	sbci	r19, 0xFF	; 255
 602:	9d 91       	ld	r25, X+
 604:	91 93       	st	Z+, r25
 606:	e2 17       	cp	r30, r18
 608:	f3 07       	cpc	r31, r19
 60a:	d9 f7       	brne	.-10     	; 0x602 <_ZN6Si446311SetPropertyEihPh+0x4a>
 60c:	48 2f       	mov	r20, r24
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	4b 5f       	subi	r20, 0xFB	; 251
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	02 c0       	rjmp	.+4      	; 0x61a <_ZN6Si446311SetPropertyEihPh+0x62>
 616:	44 e0       	ldi	r20, 0x04	; 4
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	be 01       	movw	r22, r28
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	c8 01       	movw	r24, r16
 622:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6Si44637SendCmdEPhh>
 626:	60 96       	adiw	r28, 0x10	; 16
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <_ZN6Si446312ReadResponseEPhh>:
 63c:	bf 92       	push	r11
 63e:	cf 92       	push	r12
 640:	df 92       	push	r13
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ec 01       	movw	r28, r24
 650:	7b 01       	movw	r14, r22
 652:	b4 2e       	mov	r11, r20
 654:	00 e4       	ldi	r16, 0x40	; 64
 656:	16 e0       	ldi	r17, 0x06	; 6
 658:	cc 24       	eor	r12, r12
 65a:	c3 94       	inc	r12
 65c:	d1 2c       	mov	r13, r1
 65e:	ea 81       	ldd	r30, Y+2	; 0x02
 660:	fb 81       	ldd	r31, Y+3	; 0x03
 662:	90 81       	ld	r25, Z
 664:	96 01       	movw	r18, r12
 666:	0e 80       	ldd	r0, Y+6	; 0x06
 668:	02 c0       	rjmp	.+4      	; 0x66e <_ZN6Si446312ReadResponseEPhh+0x32>
 66a:	22 0f       	add	r18, r18
 66c:	33 1f       	adc	r19, r19
 66e:	0a 94       	dec	r0
 670:	e2 f7       	brpl	.-8      	; 0x66a <_ZN6Si446312ReadResponseEPhh+0x2e>
 672:	82 2f       	mov	r24, r18
 674:	80 95       	com	r24
 676:	89 23       	and	r24, r25
 678:	80 83       	st	Z, r24
 67a:	84 e4       	ldi	r24, 0x44	; 68
 67c:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 686:	8f 3f       	cpi	r24, 0xFF	; 255
 688:	21 f4       	brne	.+8      	; 0x692 <_ZN6Si446312ReadResponseEPhh+0x56>
 68a:	8b 0d       	add	r24, r11
 68c:	b1 10       	cpse	r11, r1
 68e:	12 c0       	rjmp	.+36     	; 0x6b4 <_ZN6Si446312ReadResponseEPhh+0x78>
 690:	1f c0       	rjmp	.+62     	; 0x6d0 <_ZN6Si446312ReadResponseEPhh+0x94>
 692:	ea 81       	ldd	r30, Y+2	; 0x02
 694:	fb 81       	ldd	r31, Y+3	; 0x03
 696:	20 81       	ld	r18, Z
 698:	c6 01       	movw	r24, r12
 69a:	0e 80       	ldd	r0, Y+6	; 0x06
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <_ZN6Si446312ReadResponseEPhh+0x66>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	0a 94       	dec	r0
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <_ZN6Si446312ReadResponseEPhh+0x62>
 6a6:	82 2b       	or	r24, r18
 6a8:	80 83       	st	Z, r24
 6aa:	01 50       	subi	r16, 0x01	; 1
 6ac:	11 09       	sbc	r17, r1
 6ae:	b9 f6       	brne	.-82     	; 0x65e <_ZN6Si446312ReadResponseEPhh+0x22>
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	1c c0       	rjmp	.+56     	; 0x6ec <_ZN6Si446312ReadResponseEPhh+0xb0>
 6b4:	87 01       	movw	r16, r14
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	e8 0e       	add	r14, r24
 6bc:	f9 1e       	adc	r15, r25
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 6c4:	f8 01       	movw	r30, r16
 6c6:	81 93       	st	Z+, r24
 6c8:	8f 01       	movw	r16, r30
 6ca:	ee 15       	cp	r30, r14
 6cc:	ff 05       	cpc	r31, r15
 6ce:	b9 f7       	brne	.-18     	; 0x6be <_ZN6Si446312ReadResponseEPhh+0x82>
 6d0:	ea 81       	ldd	r30, Y+2	; 0x02
 6d2:	fb 81       	ldd	r31, Y+3	; 0x03
 6d4:	20 81       	ld	r18, Z
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 80       	ldd	r0, Y+6	; 0x06
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <_ZN6Si446312ReadResponseEPhh+0xa6>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	0a 94       	dec	r0
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <_ZN6Si446312ReadResponseEPhh+0xa2>
 6e6:	82 2b       	or	r24, r18
 6e8:	80 83       	st	Z, r24
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	bf 90       	pop	r11
 6fe:	08 95       	ret

00000700 <_ZN6Si446312GetIntStatusEhhhP9IntStatus>:
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	00 d0       	rcall	.+0      	; 0x70e <_ZN6Si446312GetIntStatusEhhhP9IntStatus+0xe>
 70e:	00 d0       	rcall	.+0      	; 0x710 <_ZN6Si446312GetIntStatusEhhhP9IntStatus+0x10>
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	7c 01       	movw	r14, r24
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	89 83       	std	Y+1, r24	; 0x01
 71a:	6a 83       	std	Y+2, r22	; 0x02
 71c:	4b 83       	std	Y+3, r20	; 0x03
 71e:	2c 83       	std	Y+4, r18	; 0x04
 720:	44 e0       	ldi	r20, 0x04	; 4
 722:	be 01       	movw	r22, r28
 724:	6f 5f       	subi	r22, 0xFF	; 255
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	c7 01       	movw	r24, r14
 72a:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6Si44637SendCmdEPhh>
 72e:	88 23       	and	r24, r24
 730:	29 f0       	breq	.+10     	; 0x73c <_ZN6Si446312GetIntStatusEhhhP9IntStatus+0x3c>
 732:	48 e0       	ldi	r20, 0x08	; 8
 734:	b8 01       	movw	r22, r16
 736:	c7 01       	movw	r24, r14
 738:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN6Si446312ReadResponseEPhh>
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	0f 90       	pop	r0
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	08 95       	ret

00000752 <_ZN6Si446311GetFifoInfoEP8FifoInfo>:
 752:	ef 92       	push	r14
 754:	ff 92       	push	r15
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	00 d0       	rcall	.+0      	; 0x760 <_ZN6Si446311GetFifoInfoEP8FifoInfo+0xe>
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	8c 01       	movw	r16, r24
 766:	7b 01       	movw	r14, r22
 768:	85 e1       	ldi	r24, 0x15	; 21
 76a:	89 83       	std	Y+1, r24	; 0x01
 76c:	1a 82       	std	Y+2, r1	; 0x02
 76e:	42 e0       	ldi	r20, 0x02	; 2
 770:	be 01       	movw	r22, r28
 772:	6f 5f       	subi	r22, 0xFF	; 255
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	c8 01       	movw	r24, r16
 778:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6Si44637SendCmdEPhh>
 77c:	88 23       	and	r24, r24
 77e:	29 f0       	breq	.+10     	; 0x78a <_ZN6Si446311GetFifoInfoEP8FifoInfo+0x38>
 780:	42 e0       	ldi	r20, 0x02	; 2
 782:	b7 01       	movw	r22, r14
 784:	c8 01       	movw	r24, r16
 786:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN6Si446312ReadResponseEPhh>
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	ff 90       	pop	r15
 798:	ef 90       	pop	r14
 79a:	08 95       	ret

0000079c <_ZN6Si44637StartRxEhhihhh>:
 79c:	cf 92       	push	r12
 79e:	ef 92       	push	r14
 7a0:	0f 93       	push	r16
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	28 97       	sbiw	r28, 0x08	; 8
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	fe 01       	movw	r30, r28
 7b8:	31 96       	adiw	r30, 0x01	; 1
 7ba:	58 e0       	ldi	r21, 0x08	; 8
 7bc:	df 01       	movw	r26, r30
 7be:	1d 92       	st	X+, r1
 7c0:	5a 95       	dec	r21
 7c2:	e9 f7       	brne	.-6      	; 0x7be <_ZN6Si44637StartRxEhhihhh+0x22>
 7c4:	52 e3       	ldi	r21, 0x32	; 50
 7c6:	59 83       	std	Y+1, r21	; 0x01
 7c8:	6a 83       	std	Y+2, r22	; 0x02
 7ca:	4b 83       	std	Y+3, r20	; 0x03
 7cc:	3c 83       	std	Y+4, r19	; 0x04
 7ce:	2d 83       	std	Y+5, r18	; 0x05
 7d0:	0e 83       	std	Y+6, r16	; 0x06
 7d2:	ef 82       	std	Y+7, r14	; 0x07
 7d4:	c8 86       	std	Y+8, r12	; 0x08
 7d6:	48 e0       	ldi	r20, 0x08	; 8
 7d8:	bf 01       	movw	r22, r30
 7da:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6Si44637SendCmdEPhh>
 7de:	28 96       	adiw	r28, 0x08	; 8
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	de bf       	out	0x3e, r29	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	cd bf       	out	0x3d, r28	; 61
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	0f 91       	pop	r16
 7f0:	ef 90       	pop	r14
 7f2:	cf 90       	pop	r12
 7f4:	08 95       	ret

000007f6 <_ZN6Si44636ReadRxEPhh>:
 7f6:	cf 92       	push	r12
 7f8:	df 92       	push	r13
 7fa:	ef 92       	push	r14
 7fc:	ff 92       	push	r15
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	7c 01       	movw	r14, r24
 808:	6b 01       	movw	r12, r22
 80a:	c4 2f       	mov	r28, r20
 80c:	dc 01       	movw	r26, r24
 80e:	12 96       	adiw	r26, 0x02	; 2
 810:	ed 91       	ld	r30, X+
 812:	fc 91       	ld	r31, X
 814:	13 97       	sbiw	r26, 0x03	; 3
 816:	20 81       	ld	r18, Z
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	16 96       	adiw	r26, 0x06	; 6
 81e:	0c 90       	ld	r0, X
 820:	02 c0       	rjmp	.+4      	; 0x826 <_ZN6Si44636ReadRxEPhh+0x30>
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	0a 94       	dec	r0
 828:	e2 f7       	brpl	.-8      	; 0x822 <_ZN6Si44636ReadRxEPhh+0x2c>
 82a:	80 95       	com	r24
 82c:	82 23       	and	r24, r18
 82e:	80 83       	st	Z, r24
 830:	87 e7       	ldi	r24, 0x77	; 119
 832:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 836:	9f ef       	ldi	r25, 0xFF	; 255
 838:	9c 0f       	add	r25, r28
 83a:	cc 23       	and	r28, r28
 83c:	71 f0       	breq	.+28     	; 0x85a <_ZN6Si44636ReadRxEPhh+0x64>
 83e:	e6 01       	movw	r28, r12
 840:	09 2f       	mov	r16, r25
 842:	10 e0       	ldi	r17, 0x00	; 0
 844:	0f 5f       	subi	r16, 0xFF	; 255
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	0c 0d       	add	r16, r12
 84a:	1d 1d       	adc	r17, r13
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 852:	89 93       	st	Y+, r24
 854:	c0 17       	cp	r28, r16
 856:	d1 07       	cpc	r29, r17
 858:	c9 f7       	brne	.-14     	; 0x84c <_ZN6Si44636ReadRxEPhh+0x56>
 85a:	d7 01       	movw	r26, r14
 85c:	12 96       	adiw	r26, 0x02	; 2
 85e:	ed 91       	ld	r30, X+
 860:	fc 91       	ld	r31, X
 862:	13 97       	sbiw	r26, 0x03	; 3
 864:	20 81       	ld	r18, Z
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	16 96       	adiw	r26, 0x06	; 6
 86c:	0c 90       	ld	r0, X
 86e:	02 c0       	rjmp	.+4      	; 0x874 <_ZN6Si44636ReadRxEPhh+0x7e>
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	0a 94       	dec	r0
 876:	e2 f7       	brpl	.-8      	; 0x870 <_ZN6Si44636ReadRxEPhh+0x7a>
 878:	82 2b       	or	r24, r18
 87a:	80 83       	st	Z, r24
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	ff 90       	pop	r15
 886:	ef 90       	pop	r14
 888:	df 90       	pop	r13
 88a:	cf 90       	pop	r12
 88c:	08 95       	ret

0000088e <_ZN6Si44638ReadFrrAEv>:
 88e:	0f 93       	push	r16
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	8c 01       	movw	r16, r24
 898:	dc 01       	movw	r26, r24
 89a:	12 96       	adiw	r26, 0x02	; 2
 89c:	ed 91       	ld	r30, X+
 89e:	fc 91       	ld	r31, X
 8a0:	13 97       	sbiw	r26, 0x03	; 3
 8a2:	90 81       	ld	r25, Z
 8a4:	c1 e0       	ldi	r28, 0x01	; 1
 8a6:	d0 e0       	ldi	r29, 0x00	; 0
 8a8:	9e 01       	movw	r18, r28
 8aa:	16 96       	adiw	r26, 0x06	; 6
 8ac:	0c 90       	ld	r0, X
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <_ZN6Si44638ReadFrrAEv+0x26>
 8b0:	22 0f       	add	r18, r18
 8b2:	33 1f       	adc	r19, r19
 8b4:	0a 94       	dec	r0
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <_ZN6Si44638ReadFrrAEv+0x22>
 8b8:	82 2f       	mov	r24, r18
 8ba:	80 95       	com	r24
 8bc:	89 23       	and	r24, r25
 8be:	80 83       	st	Z, r24
 8c0:	80 e5       	ldi	r24, 0x50	; 80
 8c2:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11SpiExchangeh>
 8cc:	d8 01       	movw	r26, r16
 8ce:	12 96       	adiw	r26, 0x02	; 2
 8d0:	ed 91       	ld	r30, X+
 8d2:	fc 91       	ld	r31, X
 8d4:	13 97       	sbiw	r26, 0x03	; 3
 8d6:	90 81       	ld	r25, Z
 8d8:	16 96       	adiw	r26, 0x06	; 6
 8da:	0c 90       	ld	r0, X
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <_ZN6Si44638ReadFrrAEv+0x54>
 8de:	cc 0f       	add	r28, r28
 8e0:	dd 1f       	adc	r29, r29
 8e2:	0a 94       	dec	r0
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <_ZN6Si44638ReadFrrAEv+0x50>
 8e6:	c9 2b       	or	r28, r25
 8e8:	c0 83       	st	Z, r28
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	08 95       	ret

000008f4 <_ZN6Si446311SetPropertyEih>:
	if(!SendCmd(cmdBuff, 4)) return false;
	return ReadResponse(value, 1);
}

bool Si4463::SetProperty(int propId, ubyte value)
{
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	00 d0       	rcall	.+0      	; 0x8fa <_ZN6Si446311SetPropertyEih+0x6>
 8fa:	00 d0       	rcall	.+0      	; 0x8fc <_ZN6Si446311SetPropertyEih+0x8>
 8fc:	1f 92       	push	r1
 8fe:	cd b7       	in	r28, 0x3d	; 61
 900:	de b7       	in	r29, 0x3e	; 62
	ubyte cmdBuff[5] = { SET_PROPERTY, (ubyte)(propId >> 8), 1, (ubyte)(propId & 0xFF), value };
 902:	fe 01       	movw	r30, r28
 904:	31 96       	adiw	r30, 0x01	; 1
 906:	25 e0       	ldi	r18, 0x05	; 5
 908:	df 01       	movw	r26, r30
 90a:	1d 92       	st	X+, r1
 90c:	2a 95       	dec	r18
 90e:	e9 f7       	brne	.-6      	; 0x90a <__stack+0xb>
 910:	21 e1       	ldi	r18, 0x11	; 17
 912:	29 83       	std	Y+1, r18	; 0x01
 914:	21 e0       	ldi	r18, 0x01	; 1
 916:	2b 83       	std	Y+3, r18	; 0x03
 918:	7a 83       	std	Y+2, r23	; 0x02
 91a:	6c 83       	std	Y+4, r22	; 0x04
 91c:	4d 83       	std	Y+5, r20	; 0x05
	return SendCmd(cmdBuff, 5);
 91e:	45 e0       	ldi	r20, 0x05	; 5
 920:	bf 01       	movw	r22, r30
 922:	0e 94 43 02 	call	0x486	; 0x486 <_ZN6Si44637SendCmdEPhh>
}
 926:	0f 90       	pop	r0
 928:	0f 90       	pop	r0
 92a:	0f 90       	pop	r0
 92c:	0f 90       	pop	r0
 92e:	0f 90       	pop	r0
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	08 95       	ret

00000936 <_Z13SpiMasterInitv>:

 #include "Spi.h"

 void SpiMasterInit()
 {
	 DDRB |= (1<<MOSI_PIN) | (1<<SCK_PIN);
 936:	84 b1       	in	r24, 0x04	; 4
 938:	88 62       	ori	r24, 0x28	; 40
 93a:	84 b9       	out	0x04, r24	; 4
	 SPCR |= (1<<SPE) | (1<<MSTR) | SPI_DIV_4;
 93c:	8c b5       	in	r24, 0x2c	; 44
 93e:	80 65       	ori	r24, 0x50	; 80
 940:	8c bd       	out	0x2c, r24	; 44
 942:	08 95       	ret

00000944 <_Z11SpiExchangeh>:
 }

 ubyte SpiExchange(ubyte value)
 {
	 SPDR = value;
 944:	8e bd       	out	0x2e, r24	; 46
	 while(!(SPSR & (1<<SPIF)));
 946:	0d b4       	in	r0, 0x2d	; 45
 948:	07 fe       	sbrs	r0, 7
 94a:	fd cf       	rjmp	.-6      	; 0x946 <_Z11SpiExchangeh+0x2>
	 return SPDR;
 94c:	8e b5       	in	r24, 0x2e	; 46
 94e:	08 95       	ret

00000950 <_Z9UsartInitv>:
	while(ptr >= buff)
	{
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = *ptr--;
	}
}
 950:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 954:	8c e0       	ldi	r24, 0x0C	; 12
 956:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 95a:	e0 ec       	ldi	r30, 0xC0	; 192
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	8d 7f       	andi	r24, 0xFD	; 253
 962:	80 83       	st	Z, r24
 964:	e1 ec       	ldi	r30, 0xC1	; 193
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	88 69       	ori	r24, 0x98	; 152
 96c:	80 83       	st	Z, r24
 96e:	78 94       	sei
 970:	08 95       	ret

00000972 <_Z9UsartSendc>:
 972:	e0 ec       	ldi	r30, 0xC0	; 192
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	90 81       	ld	r25, Z
 978:	95 ff       	sbrs	r25, 5
 97a:	fd cf       	rjmp	.-6      	; 0x976 <_Z9UsartSendc+0x4>
 97c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 980:	08 95       	ret

00000982 <_Z9UsartSendPci>:
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	61 15       	cp	r22, r1
 988:	71 05       	cpc	r23, r1
 98a:	79 f0       	breq	.+30     	; 0x9aa <_Z9UsartSendPci+0x28>
 98c:	dc 01       	movw	r26, r24
 98e:	68 0f       	add	r22, r24
 990:	79 1f       	adc	r23, r25
 992:	e0 ec       	ldi	r30, 0xC0	; 192
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	c6 ec       	ldi	r28, 0xC6	; 198
 998:	d0 e0       	ldi	r29, 0x00	; 0
 99a:	90 81       	ld	r25, Z
 99c:	95 ff       	sbrs	r25, 5
 99e:	fd cf       	rjmp	.-6      	; 0x99a <_Z9UsartSendPci+0x18>
 9a0:	9d 91       	ld	r25, X+
 9a2:	98 83       	st	Y, r25
 9a4:	a6 17       	cp	r26, r22
 9a6:	b7 07       	cpc	r27, r23
 9a8:	c1 f7       	brne	.-16     	; 0x99a <_Z9UsartSendPci+0x18>
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

000009b0 <__vector_18>:
volatile char rxIdx, rxLen;

#define UsartAvailable rxLen

ISR(USART_RX_vect)
{
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	8f 93       	push	r24
 9bc:	ef 93       	push	r30
 9be:	ff 93       	push	r31
	rxBuff[rxIdx++] = UDR0;
 9c0:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <rxIdx>
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	8e 0f       	add	r24, r30
 9c8:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rxIdx>
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 9d2:	ec 59       	subi	r30, 0x9C	; 156
 9d4:	fd 4f       	sbci	r31, 0xFD	; 253
 9d6:	80 83       	st	Z, r24
	rxIdx &= RX_BUFFER_SIZE - 1;
 9d8:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rxIdx>
 9dc:	8f 73       	andi	r24, 0x3F	; 63
 9de:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <rxIdx>
	if(!(rxLen & RX_BUFFER_SIZE)) rxLen++;
 9e2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rxLen>
 9e6:	86 fd       	sbrc	r24, 6
 9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <__vector_18+0x44>
 9ea:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rxLen>
 9ee:	8f 5f       	subi	r24, 0xFF	; 255
 9f0:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <rxLen>
}
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	8f 91       	pop	r24
 9fa:	0f 90       	pop	r0
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	0f 90       	pop	r0
 a00:	1f 90       	pop	r1
 a02:	18 95       	reti

00000a04 <_Z9UsartReadPc>:

bool UsartRead(char* c)
{
 a04:	dc 01       	movw	r26, r24
	if(rxLen > 0)
 a06:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <rxLen>
 a0a:	99 23       	and	r25, r25
 a0c:	99 f0       	breq	.+38     	; 0xa34 <_Z9UsartReadPc+0x30>
	{
		*c = rxBuff[--rxIdx];
 a0e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <rxIdx>
 a12:	e1 50       	subi	r30, 0x01	; 1
 a14:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <rxIdx>
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	ec 59       	subi	r30, 0x9C	; 156
 a1c:	fd 4f       	sbci	r31, 0xFD	; 253
 a1e:	80 81       	ld	r24, Z
 a20:	8c 93       	st	X, r24
		rxLen--;
 a22:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rxLen>
 a26:	81 50       	subi	r24, 0x01	; 1
 a28:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <rxLen>
		if(rxIdx < 0) rxIdx = RX_BUFFER_SIZE - 1;
 a2c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <rxIdx>
		return true;
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	08 95       	ret
	} else return false;
 a34:	80 e0       	ldi	r24, 0x00	; 0
}
 a36:	08 95       	ret

00000a38 <__tablejump2__>:
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	05 90       	lpm	r0, Z+
 a3e:	f4 91       	lpm	r31, Z
 a40:	e0 2d       	mov	r30, r0
 a42:	09 94       	ijmp

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
