
EepromCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  0000044a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  008001b4  008001b4  00000592  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3a  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000436  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ac  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c0  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3f       	cpi	r26, 0xF8	; 248
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  9e:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z11GetTwiStatev>:
	return true;
}

void GetTwiState()
{
	UsartSend(lastTwiAction);
  a6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <lastTwiAction>
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z9UsartSendi>
	UsartSend(" \0");
  b0:	89 e4       	ldi	r24, 0x49	; 73
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
	UsartSend(lastTwiStatus);
  b8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z9UsartSendi>
	UsartNewLine();
  c2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z12UsartNewLinev>
  c6:	08 95       	ret

000000c8 <_Z8ReadByteiPh>:

	TwiWrite(0xA1);
}

bool ReadByte(int addr, ubyte* outByte)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	d8 2f       	mov	r29, r24
  d2:	8b 01       	movw	r16, r22
	if(!TwiStart())
  d4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z8TwiStartv>
  d8:	c8 2f       	mov	r28, r24
  da:	81 11       	cpse	r24, r1
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <_Z8ReadByteiPh+0x20>
	{
		UsartSend("Failed start\r\n\0");
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
		return false;
  e6:	39 c0       	rjmp	.+114    	; 0x15a <_Z8ReadByteiPh+0x92>
	}

	TwiWrite(EEPROM_ADDR << 1);
  e8:	80 ea       	ldi	r24, 0xA0	; 160
  ea:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z8TwiWriteh>
	if(lastTwiStatus != TW_MT_SLA_ACK) // write
  ee:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
  f2:	88 31       	cpi	r24, 0x18	; 24
  f4:	31 f0       	breq	.+12     	; 0x102 <_Z8ReadByteiPh+0x3a>
	{
		UsartSend("Failed device addr\r\n\0");
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
		return false;
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	2c c0       	rjmp	.+88     	; 0x15a <_Z8ReadByteiPh+0x92>
	}

	TwiWrite(addr & 0xFF);
 102:	8d 2f       	mov	r24, r29
 104:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z8TwiWriteh>
	if(lastTwiStatus != TW_MT_DATA_ACK) // write
 108:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 10c:	88 32       	cpi	r24, 0x28	; 40
 10e:	31 f0       	breq	.+12     	; 0x11c <_Z8ReadByteiPh+0x54>
	{
		UsartSend("Failed device addr\r\n\0");
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
		return false;
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	1f c0       	rjmp	.+62     	; 0x15a <_Z8ReadByteiPh+0x92>
	}

	TwiStop();	
 11c:	0e 94 0b 01 	call	0x216	; 0x216 <_Z7TwiStopv>
	if(!TwiStart())
 120:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z8TwiStartv>
 124:	c8 2f       	mov	r28, r24
 126:	81 11       	cpse	r24, r1
 128:	05 c0       	rjmp	.+10     	; 0x134 <_Z8ReadByteiPh+0x6c>
	{
		UsartSend("Failed second start\r\n\0");
 12a:	8c e4       	ldi	r24, 0x4C	; 76
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
		return false;
 132:	13 c0       	rjmp	.+38     	; 0x15a <_Z8ReadByteiPh+0x92>
	}

	TwiWrite((EEPROM_ADDR << 1) | R);
 134:	81 ea       	ldi	r24, 0xA1	; 161
 136:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z8TwiWriteh>
	if(lastTwiStatus != TW_MR_SLA_ACK)
 13a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 13e:	80 34       	cpi	r24, 0x40	; 64
 140:	41 f0       	breq	.+16     	; 0x152 <_Z8ReadByteiPh+0x8a>
	{
		UsartSend("Failed slave addr\r\n\0");
 142:	83 e6       	ldi	r24, 0x63	; 99
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
		GetTwiState();
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11GetTwiStatev>
		return false;
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	04 c0       	rjmp	.+8      	; 0x15a <_Z8ReadByteiPh+0x92>
	}

	//UsartSend("So far so good... \r\n\0");

	*outByte = TwiReadNack();
 152:	0e 94 22 01 	call	0x244	; 0x244 <_Z11TwiReadNackv>
 156:	f8 01       	movw	r30, r16
 158:	80 83       	st	Z, r24
	return true;
}
 15a:	8c 2f       	mov	r24, r28
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <main>:
#include "twi.h"

#include "24c16.h"

int main(void)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	UsartInit();
 170:	0e 94 35 01 	call	0x26a	; 0x26a <_Z9UsartInitv>
	TwiInit();
 174:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z7TwiInitv>
    /* Replace with your application code */

	char dummy;

    while (!UsartRead(&dummy)) 
 178:	04 c0       	rjmp	.+8      	; 0x182 <main+0x1c>
    {
		UsartSend("Press any key...\r\n\0");
 17a:	88 e7       	ldi	r24, 0x78	; 120
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
	TwiInit();
    /* Replace with your application code */

	char dummy;

    while (!UsartRead(&dummy)) 
 182:	ce 01       	movw	r24, r28
 184:	02 96       	adiw	r24, 0x02	; 2
 186:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_Z9UsartReadPc>
 18a:	88 23       	and	r24, r24
 18c:	b1 f3       	breq	.-20     	; 0x17a <main+0x14>

	_delay_ms(100);
	*/

	ubyte recv;
	UsartSend("Reading...\r\n\0");
 18e:	8c e8       	ldi	r24, 0x8C	; 140
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
	result = ReadByte(0x19, &recv);
 196:	be 01       	movw	r22, r28
 198:	6f 5f       	subi	r22, 0xFF	; 255
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	89 e1       	ldi	r24, 0x19	; 25
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8ReadByteiPh>
 1a4:	18 2f       	mov	r17, r24
	UsartSend("Done\r\n\0");
 1a6:	8a e9       	ldi	r24, 0x9A	; 154
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
	if(result)
 1ae:	11 23       	and	r17, r17
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <main+0x5e>
	{
		UsartSend("Recv: \0");
 1b2:	82 ea       	ldi	r24, 0xA2	; 162
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
		UsartSend(recv);
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z9UsartSendi>
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <main+0x66>
	}
	else
	{
		UsartSend("Failed.\0");
 1c4:	8a ea       	ldi	r24, 0xAA	; 170
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z9UsartSendPc>
	}

	while(1);
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x66>

000001ce <_Z7TwiInitv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	TwiWaitInt();
	lastTwiAction = TWI_ACTION_READ_ACK;
	lastTwiStatus = TwiStatus();
	return TWDR;
}
 1ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1d2:	88 e4       	ldi	r24, 0x48	; 72
 1d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 1d8:	87 b1       	in	r24, 0x07	; 7
 1da:	8f 7c       	andi	r24, 0xCF	; 207
 1dc:	87 b9       	out	0x07, r24	; 7
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e4:	08 95       	ret

000001e6 <_Z8TwiStartv>:
 1e6:	84 ea       	ldi	r24, 0xA4	; 164
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ec:	ec eb       	ldi	r30, 0xBC	; 188
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	ec f7       	brge	.-6      	; 0x1f0 <_Z8TwiStartv+0xa>
 1f6:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <lastTwiAction>
 1fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1fe:	98 7f       	andi	r25, 0xF8	; 248
 200:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <__data_end>
 204:	98 30       	cpi	r25, 0x08	; 8
 206:	29 f0       	breq	.+10     	; 0x212 <_Z8TwiStartv+0x2c>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 31       	cpi	r25, 0x10	; 16
 20c:	19 f0       	breq	.+6      	; 0x214 <_Z8TwiStartv+0x2e>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret

00000216 <_Z7TwiStopv>:
 216:	84 e9       	ldi	r24, 0x94	; 148
 218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 21c:	08 95       	ret

0000021e <_Z8TwiWriteh>:
 21e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 222:	84 e8       	ldi	r24, 0x84	; 132
 224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 228:	ec eb       	ldi	r30, 0xBC	; 188
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	88 23       	and	r24, r24
 230:	ec f7       	brge	.-6      	; 0x22c <_Z8TwiWriteh+0xe>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <lastTwiAction>
 238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 23c:	88 7f       	andi	r24, 0xF8	; 248
 23e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
 242:	08 95       	ret

00000244 <_Z11TwiReadNackv>:

ubyte TwiReadNack()
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 244:	84 e8       	ldi	r24, 0x84	; 132
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TwiWaitInt();
 24a:	ec eb       	ldi	r30, 0xBC	; 188
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <_Z11TwiReadNackv+0xa>
	lastTwiAction = TWI_ACTION_READ_NACK;
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <lastTwiAction>
	lastTwiStatus = TwiStatus();
 25a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
	return TWDR;
 264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 268:	08 95       	ret

0000026a <_Z9UsartInitv>:
	buff += len;
	while(len--) *--buff = rxBuff[--rxIdx];
	sei();

	return true;
}
 26a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 274:	e0 ec       	ldi	r30, 0xC0	; 192
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	80 83       	st	Z, r24
 27e:	e1 ec       	ldi	r30, 0xC1	; 193
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 69       	ori	r24, 0x98	; 152
 286:	80 83       	st	Z, r24
 288:	78 94       	sei
 28a:	08 95       	ret

0000028c <_Z9UsartSendc>:
 28c:	e0 ec       	ldi	r30, 0xC0	; 192
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	90 81       	ld	r25, Z
 292:	95 ff       	sbrs	r25, 5
 294:	fd cf       	rjmp	.-6      	; 0x290 <_Z9UsartSendc+0x4>
 296:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 29a:	08 95       	ret

0000029c <_Z9UsartSendPc>:
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 81       	ld	r18, Z
 2a4:	22 23       	and	r18, r18
 2a6:	69 f0       	breq	.+26     	; 0x2c2 <_Z9UsartSendPc+0x26>
 2a8:	dc 01       	movw	r26, r24
 2aa:	11 96       	adiw	r26, 0x01	; 1
 2ac:	e0 ec       	ldi	r30, 0xC0	; 192
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	c6 ec       	ldi	r28, 0xC6	; 198
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <_Z9UsartSendPc+0x18>
 2ba:	28 83       	st	Y, r18
 2bc:	2d 91       	ld	r18, X+
 2be:	21 11       	cpse	r18, r1
 2c0:	f9 cf       	rjmp	.-14     	; 0x2b4 <_Z9UsartSendPc+0x18>
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <_Z9UsartSendi>:
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <_Z9UsartSendi+0xe>
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <_Z9UsartSendi+0x10>
 2d8:	1f 92       	push	r1
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	99 23       	and	r25, r25
 2e0:	5c f4       	brge	.+22     	; 0x2f8 <_Z9UsartSendi+0x30>
 2e2:	91 95       	neg	r25
 2e4:	81 95       	neg	r24
 2e6:	91 09       	sbc	r25, r1
 2e8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	20 81       	ld	r18, Z
 2ee:	25 ff       	sbrs	r18, 5
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <_Z9UsartSendi+0x24>
 2f2:	2d e2       	ldi	r18, 0x2D	; 45
 2f4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2f8:	8e 01       	movw	r16, r28
 2fa:	0f 5f       	subi	r16, 0xFF	; 255
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
 2fe:	f8 01       	movw	r30, r16
 300:	0f 2e       	mov	r0, r31
 302:	fa e0       	ldi	r31, 0x0A	; 10
 304:	ef 2e       	mov	r14, r31
 306:	f1 2c       	mov	r15, r1
 308:	f0 2d       	mov	r31, r0
 30a:	9f 01       	movw	r18, r30
 30c:	b7 01       	movw	r22, r14
 30e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__divmodhi4>
 312:	80 5d       	subi	r24, 0xD0	; 208
 314:	81 93       	st	Z+, r24
 316:	86 2f       	mov	r24, r22
 318:	97 2f       	mov	r25, r23
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	b1 f7       	brne	.-20     	; 0x30a <_Z9UsartSendi+0x42>
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	28 17       	cp	r18, r24
 324:	39 07       	cpc	r19, r25
 326:	80 f0       	brcs	.+32     	; 0x348 <_Z9UsartSendi+0x80>
 328:	af 01       	movw	r20, r30
 32a:	e0 ec       	ldi	r30, 0xC0	; 192
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	26 ec       	ldi	r18, 0xC6	; 198
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	85 ff       	sbrs	r24, 5
 336:	fd cf       	rjmp	.-6      	; 0x332 <_Z9UsartSendi+0x6a>
 338:	da 01       	movw	r26, r20
 33a:	8e 91       	ld	r24, -X
 33c:	ad 01       	movw	r20, r26
 33e:	d9 01       	movw	r26, r18
 340:	8c 93       	st	X, r24
 342:	40 17       	cp	r20, r16
 344:	51 07       	cpc	r21, r17
 346:	a9 f7       	brne	.-22     	; 0x332 <_Z9UsartSendi+0x6a>
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	08 95       	ret

00000360 <__vector_18>:
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
 370:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <rxIdx>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	8e 0f       	add	r24, r30
 378:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <rxIdx>
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 382:	e8 54       	subi	r30, 0x48	; 72
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	80 83       	st	Z, r24
 388:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <rxIdx>
 38c:	8f 73       	andi	r24, 0x3F	; 63
 38e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <rxIdx>
 392:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <rxLen>
 396:	86 fd       	sbrc	r24, 6
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <__vector_18+0x44>
 39a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <rxLen>
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <rxLen>
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	8f 91       	pop	r24
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <_Z9UsartReadPc>:
 3b4:	dc 01       	movw	r26, r24
 3b6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <rxLen>
 3ba:	99 23       	and	r25, r25
 3bc:	99 f0       	breq	.+38     	; 0x3e4 <_Z9UsartReadPc+0x30>
 3be:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <rxIdx>
 3c2:	e1 50       	subi	r30, 0x01	; 1
 3c4:	e0 93 b7 01 	sts	0x01B7, r30	; 0x8001b7 <rxIdx>
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	e8 54       	subi	r30, 0x48	; 72
 3cc:	fe 4f       	sbci	r31, 0xFE	; 254
 3ce:	80 81       	ld	r24, Z
 3d0:	8c 93       	st	X, r24
 3d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <rxLen>
 3d6:	81 50       	subi	r24, 0x01	; 1
 3d8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <rxLen>
 3dc:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <rxIdx>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <_Z12UsartNewLinev>:

void UsartNewLine()
{
	UsartSend('\r');
 3e8:	8d e0       	ldi	r24, 0x0D	; 13
 3ea:	0e 94 46 01 	call	0x28c	; 0x28c <_Z9UsartSendc>
	UsartSend('\n');
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	0e 94 46 01 	call	0x28c	; 0x28c <_Z9UsartSendc>
 3f4:	08 95       	ret

000003f6 <__divmodhi4>:
 3f6:	97 fb       	bst	r25, 7
 3f8:	07 2e       	mov	r0, r23
 3fa:	16 f4       	brtc	.+4      	; 0x400 <__FUSE_REGION_LENGTH__>
 3fc:	00 94       	com	r0
 3fe:	07 d0       	rcall	.+14     	; 0x40e <__divmodhi4_neg1>
 400:	77 fd       	sbrc	r23, 7
 402:	09 d0       	rcall	.+18     	; 0x416 <__divmodhi4_neg2>
 404:	0e 94 0f 02 	call	0x41e	; 0x41e <__udivmodhi4>
 408:	07 fc       	sbrc	r0, 7
 40a:	05 d0       	rcall	.+10     	; 0x416 <__divmodhi4_neg2>
 40c:	3e f4       	brtc	.+14     	; 0x41c <__divmodhi4_exit>

0000040e <__divmodhi4_neg1>:
 40e:	90 95       	com	r25
 410:	81 95       	neg	r24
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	08 95       	ret

00000416 <__divmodhi4_neg2>:
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255

0000041c <__divmodhi4_exit>:
 41c:	08 95       	ret

0000041e <__udivmodhi4>:
 41e:	aa 1b       	sub	r26, r26
 420:	bb 1b       	sub	r27, r27
 422:	51 e1       	ldi	r21, 0x11	; 17
 424:	07 c0       	rjmp	.+14     	; 0x434 <__udivmodhi4_ep>

00000426 <__udivmodhi4_loop>:
 426:	aa 1f       	adc	r26, r26
 428:	bb 1f       	adc	r27, r27
 42a:	a6 17       	cp	r26, r22
 42c:	b7 07       	cpc	r27, r23
 42e:	10 f0       	brcs	.+4      	; 0x434 <__udivmodhi4_ep>
 430:	a6 1b       	sub	r26, r22
 432:	b7 0b       	sbc	r27, r23

00000434 <__udivmodhi4_ep>:
 434:	88 1f       	adc	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	5a 95       	dec	r21
 43a:	a9 f7       	brne	.-22     	; 0x426 <__udivmodhi4_loop>
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	bc 01       	movw	r22, r24
 442:	cd 01       	movw	r24, r26
 444:	08 95       	ret

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
