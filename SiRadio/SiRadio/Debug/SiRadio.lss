
SiRadio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00000b54  00000be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800210  00800210  00000cf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000385d  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cab  00000000  00000000  00004815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e3  00000000  00000000  000054c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a4  00000000  00000000  000065a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c04  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca5  00000000  00000000  00007a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a6f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	3b 01       	movw	r6, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e4 e5       	ldi	r30, 0x54	; 84
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 31       	cpi	r26, 0x10	; 16
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	a0 e1       	ldi	r26, 0x10	; 16
  90:	b2 e0       	ldi	r27, 0x02	; 2
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 38       	cpi	r26, 0x84	; 132
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 a2 05 	call	0xb44	; 0xb44 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  b6:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z15CheckInterruptsv>:
	char* current = msg+6;

	while(true)
	{
		(*current)++;
		if(*current < 255) break;
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	00 e1       	ldi	r16, 0x10	; 16
  c4:	12 e0       	ldi	r17, 0x02	; 2
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	8e e2       	ldi	r24, 0x2E	; 46
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6Si446312GetIntStatusEhhhP9IntStatus>
  d4:	88 23       	and	r24, r24
  d6:	51 f0       	breq	.+20     	; 0xec <_Z15CheckInterruptsv+0x2e>
  d8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end+0x2>
  dc:	85 ff       	sbrs	r24, 5
  de:	0b c0       	rjmp	.+22     	; 0xf6 <_Z15CheckInterruptsv+0x38>
  e0:	63 e0       	ldi	r22, 0x03	; 3
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN13SerialManager3MsgEc>
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <_Z15CheckInterruptsv+0x38>
  ec:	66 e0       	ldi	r22, 0x06	; 6
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN13SerialManager3MsgEc>
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <__vector_1>:
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
 11e:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15CheckInterruptsv>
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_Z18EnableExtInterruptv>:
 144:	52 98       	cbi	0x0a, 2	; 10
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8d bb       	out	0x1d, r24	; 29
 150:	08 95       	ret

00000152 <main>:
		current--;
	}
}

int main(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <main+0x6>
 158:	00 d0       	rcall	.+0      	; 0x15a <main+0x8>
 15a:	1f 92       	push	r1
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<1) | (1<<2);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	86 60       	ori	r24, 0x06	; 6
 164:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<1;
 166:	29 9a       	sbi	0x05, 1	; 5

	UsartInit();
 168:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_Z9UsartInitv>

	char c;
	while(!UsartRead(&c));
 16c:	ce 01       	movw	r24, r28
 16e:	05 96       	adiw	r24, 0x05	; 5
 170:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z9UsartReadPc>
 174:	88 23       	and	r24, r24
 176:	d1 f3       	breq	.-12     	; 0x16c <main+0x1a>
    bool result = radio.Init();
 178:	8e e2       	ldi	r24, 0x2E	; 46
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN6Si44634InitEv>
	
	if(result) serMan.Msg(MSG_INIT_OK);
 180:	88 23       	and	r24, r24
 182:	d1 f1       	breq	.+116    	; 0x1f8 <main+0xa6>
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN13SerialManager3MsgEc>
	{
	   serMan.Msg(MSG_INIT_FAILED);
	   while(1);
	}

	EnableExtInterrupt();
 18e:	0e 94 a2 00 	call	0x144	; 0x144 <_Z18EnableExtInterruptv>

	radio.SetPowerLevel(1);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8e e2       	ldi	r24, 0x2E	; 46
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN6Si446313SetPowerLevelEh>
	
	radio.SetProperty(PKT_CRC_CONFIG, CRC_32_IEEE);
 19c:	47 e0       	ldi	r20, 0x07	; 7
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	72 e1       	ldi	r23, 0x12	; 18
 1a2:	8e e2       	ldi	r24, 0x2E	; 46
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN6Si446311SetPropertyEih>

	PacketField packet1;
	packet1.SetConfig(false, false, false, false);
 1aa:	00 e0       	ldi	r16, 0x00	; 0
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN11PacketField9SetConfigEbbbb>
	packet1.SetCrcConfig(true, true, true, true);
 1ba:	01 e0       	ldi	r16, 0x01	; 1
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <_ZN11PacketField12SetCrcConfigEbbbb>
	packet1.SetLength(11);
 1ca:	6b e0       	ldi	r22, 0x0B	; 11
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_ZN11PacketField9SetLengthEi>

	radio.SetProperty(PKT_FIELD_1_LENGTH_12_8, 4, packet1.data);
 1d6:	9e 01       	movw	r18, r28
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	44 e0       	ldi	r20, 0x04	; 4
 1de:	6d e0       	ldi	r22, 0x0D	; 13
 1e0:	72 e1       	ldi	r23, 0x12	; 18
 1e2:	8e e2       	ldi	r24, 0x2E	; 46
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN6Si446311SetPropertyEihPh>

	
	msg[0] = 1; // power level
 1ea:	e6 e3       	ldi	r30, 0x36	; 54
 1ec:	f2 e0       	ldi	r31, 0x02	; 2
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 83       	st	Z, r24

	int* pkgCount = (int*)(msg+1);
	*pkgCount = 0;
 1f2:	12 82       	std	Z+2, r1	; 0x02
 1f4:	11 82       	std	Z+1, r1	; 0x01
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <main+0xb2>
    bool result = radio.Init();
	
	if(result) serMan.Msg(MSG_INIT_OK);
	else
	{
	   serMan.Msg(MSG_INIT_FAILED);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	88 e1       	ldi	r24, 0x18	; 24
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN13SerialManager3MsgEc>

	char c;
	while(!UsartRead(&c));
    bool result = radio.Init();
	
	if(result) serMan.Msg(MSG_INIT_OK);
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0xb0>
	int* pkgCount = (int*)(msg+1);
	*pkgCount = 0;

	while (1) 
    {
		serMan.CheckForCmd();
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN13SerialManager11CheckForCmdEv>
		
		if(!(PORTD & (1<<2))) CheckInterrupts(); // изпуснат interrupt?
 20c:	5a 9b       	sbis	0x0b, 2	; 11
 20e:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z15CheckInterruptsv>

		if(shouldTx)
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 216:	88 23       	and	r24, r24
 218:	a9 f3       	breq	.-22     	; 0x204 <main+0xb2>
		{
			radio.WriteTx(msg, 11);
 21a:	4b e0       	ldi	r20, 0x0B	; 11
 21c:	66 e3       	ldi	r22, 0x36	; 54
 21e:	72 e0       	ldi	r23, 0x02	; 2
 220:	8e e2       	ldi	r24, 0x2E	; 46
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	0e 94 42 04 	call	0x884	; 0x884 <_ZN6Si44637WriteTxEPhh>
			(*pkgCount)++;
 228:	e6 e3       	ldi	r30, 0x36	; 54
 22a:	f2 e0       	ldi	r31, 0x02	; 2
 22c:	81 81       	ldd	r24, Z+1	; 0x01
 22e:	92 81       	ldd	r25, Z+2	; 0x02
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	92 83       	std	Z+2, r25	; 0x02
 234:	81 83       	std	Z+1, r24	; 0x01

			if(!radio.StartTx(0, Ready<<4, 0))
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e3       	ldi	r20, 0x30	; 48
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	8e e2       	ldi	r24, 0x2E	; 46
 240:	92 e0       	ldi	r25, 0x02	; 2
 242:	0e 94 22 04 	call	0x844	; 0x844 <_ZN6Si44637StartTxEhhi>
 246:	81 11       	cpse	r24, r1
 248:	06 c0       	rjmp	.+12     	; 0x256 <main+0x104>
			{
				serMan.Msg(MSG_TX_FAIL);
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	88 e1       	ldi	r24, 0x18	; 24
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN13SerialManager3MsgEc>
				break;
 254:	0a c0       	rjmp	.+20     	; 0x26a <main+0x118>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f e7       	ldi	r18, 0x7F	; 127
 258:	88 e3       	ldi	r24, 0x38	; 56
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x10a>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x114>
 266:	00 00       	nop
 268:	cd cf       	rjmp	.-102    	; 0x204 <main+0xb2>
			_delay_ms(50);
		}
		
    }

	while(1) serMan.Msg(MSG_RESET);
 26a:	65 e0       	ldi	r22, 0x05	; 5
 26c:	88 e1       	ldi	r24, 0x18	; 24
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN13SerialManager3MsgEc>
 274:	fa cf       	rjmp	.-12     	; 0x26a <main+0x118>

00000276 <_GLOBAL__sub_I_msg>:
}
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
#include "Si4463.h"
#include "SerialManager.h"

ubyte msg[11];
bool shouldTx = true;
Si4463 radio(&PORTB, 1, &PORTB, 2);
 27e:	02 e0       	ldi	r16, 0x02	; 2
 280:	25 e2       	ldi	r18, 0x25	; 37
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	65 e2       	ldi	r22, 0x25	; 37
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	8e e2       	ldi	r24, 0x2E	; 46
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	0e 94 48 02 	call	0x490	; 0x490 <_ZN6Si4463C1EPVhhS1_h>
SerialManager serMan(&radio, msg, &shouldTx, (int32*)(msg+3), (int32*)(msg+7));
 292:	0f 2e       	mov	r0, r31
 294:	fd e3       	ldi	r31, 0x3D	; 61
 296:	ef 2e       	mov	r14, r31
 298:	f2 e0       	ldi	r31, 0x02	; 2
 29a:	ff 2e       	mov	r15, r31
 29c:	f0 2d       	mov	r31, r0
 29e:	09 e3       	ldi	r16, 0x39	; 57
 2a0:	12 e0       	ldi	r17, 0x02	; 2
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	31 e0       	ldi	r19, 0x01	; 1
 2a6:	46 e3       	ldi	r20, 0x36	; 54
 2a8:	52 e0       	ldi	r21, 0x02	; 2
 2aa:	6e e2       	ldi	r22, 0x2E	; 46
 2ac:	72 e0       	ldi	r23, 0x02	; 2
 2ae:	88 e1       	ldi	r24, 0x18	; 24
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN13SerialManagerC1EP6Si4463PhPbPlS4_>
		}
		
    }

	while(1) serMan.Msg(MSG_RESET);
}
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	08 95       	ret

000002c0 <_ZN11PacketField9SetLengthEi>:

 #include "PacketField.h"

 void PacketField::SetLength(int len)
 {
	data[0] = len >> 8;
 2c0:	fc 01       	movw	r30, r24
 2c2:	70 83       	st	Z, r23
	data[1] = len & 0xFF;
 2c4:	61 83       	std	Z+1, r22	; 0x01
 2c6:	08 95       	ret

000002c8 <_ZN11PacketField9SetConfigEbbbb>:
 }

 void PacketField::SetConfig(bool manch, bool whiten, bool pnStart, bool qfsk)
 {
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	30 2f       	mov	r19, r16
	data[2] = (manch) | (whiten<<1) | (pnStart<<2) | (qfsk<<4);
 2ce:	02 2f       	mov	r16, r18
 2d0:	00 0f       	add	r16, r16
 2d2:	00 0f       	add	r16, r16
 2d4:	60 2b       	or	r22, r16
 2d6:	20 e1       	ldi	r18, 0x10	; 16
 2d8:	32 9f       	mul	r19, r18
 2da:	80 01       	movw	r16, r0
 2dc:	11 24       	eor	r1, r1
 2de:	06 2b       	or	r16, r22
 2e0:	44 0f       	add	r20, r20
 2e2:	04 2b       	or	r16, r20
 2e4:	fc 01       	movw	r30, r24
 2e6:	02 83       	std	Z+2, r16	; 0x02
 }
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <_ZN11PacketField12SetCrcConfigEbbbb>:

 void PacketField::SetCrcConfig(bool crcEnable, bool checkCrc, bool sendCrc, bool crcStart)
 {
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
	data[3] = (crcEnable<<1) | (checkCrc<<3) | (sendCrc<<5) | (crcStart<<7);
 2f2:	30 e2       	ldi	r19, 0x20	; 32
 2f4:	23 9f       	mul	r18, r19
 2f6:	f0 01       	movw	r30, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	20 e8       	ldi	r18, 0x80	; 128
 2fc:	02 9f       	mul	r16, r18
 2fe:	80 01       	movw	r16, r0
 300:	11 24       	eor	r1, r1
 302:	0e 2b       	or	r16, r30
 304:	44 0f       	add	r20, r20
 306:	44 0f       	add	r20, r20
 308:	44 0f       	add	r20, r20
 30a:	04 2b       	or	r16, r20
 30c:	66 0f       	add	r22, r22
 30e:	60 2b       	or	r22, r16
 310:	fc 01       	movw	r30, r24
 312:	63 83       	std	Z+3, r22	; 0x03
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <_ZN13SerialManagerC1EP6Si4463PhPbPlS4_>:
 {
	outBuffer[1] = 3;
	UsartSend(outBuffer, 2);
	UsartSend(msg);
	UsartSend((char*)&extraData, 2);
 }
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	fc 01       	movw	r30, r24
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	80 83       	st	Z, r24
 328:	11 82       	std	Z+1, r1	; 0x01
 32a:	75 87       	std	Z+13, r23	; 0x0d
 32c:	64 87       	std	Z+12, r22	; 0x0c
 32e:	55 8b       	std	Z+21, r21	; 0x15
 330:	44 8b       	std	Z+20, r20	; 0x14
 332:	37 87       	std	Z+15, r19	; 0x0f
 334:	26 87       	std	Z+14, r18	; 0x0e
 336:	11 8b       	std	Z+17, r17	; 0x11
 338:	00 8b       	std	Z+16, r16	; 0x10
 33a:	f3 8a       	std	Z+19, r15	; 0x13
 33c:	e2 8a       	std	Z+18, r14	; 0x12
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <_ZN13SerialManager3MsgEc>:
 348:	cf 93       	push	r28
 34a:	c6 2f       	mov	r28, r22
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	fc 01       	movw	r30, r24
 350:	21 83       	std	Z+1, r18	; 0x01
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z9UsartSendPci>
 35a:	8c 2f       	mov	r24, r28
 35c:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z9UsartSendc>
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <_ZN13SerialManager13PwrChangedMsgEv>:

 void SerialManager::PwrChangedMsg()
 {
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ec 01       	movw	r28, r24
	radio->GetPowerLevel(pwrLevel);
 36a:	6c 89       	ldd	r22, Y+20	; 0x14
 36c:	7d 89       	ldd	r23, Y+21	; 0x15
 36e:	8c 85       	ldd	r24, Y+12	; 0x0c
 370:	9d 85       	ldd	r25, Y+13	; 0x0d
 372:	0e 94 b8 04 	call	0x970	; 0x970 <_ZN6Si446313GetPowerLevelEPh>

	outBuffer[1] = 2;
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	89 83       	std	Y+1, r24	; 0x01
	UsartSend(outBuffer, 2);
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	ce 01       	movw	r24, r28
 380:	0e 94 0b 05 	call	0xa16	; 0xa16 <_Z9UsartSendPci>
	UsartSend((char)MSG_PWR);
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z9UsartSendc>
	UsartSend((char)*pwrLevel);
 38a:	ec 89       	ldd	r30, Y+20	; 0x14
 38c:	fd 89       	ldd	r31, Y+21	; 0x15
 38e:	80 81       	ld	r24, Z
 390:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z9UsartSendc>
 }
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <_ZN13SerialManager10ProcessCmdEv>:
		ProcessCmd();
	}
 }

 void SerialManager::ProcessCmd()
 {
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	fc 01       	movw	r30, r24
	switch(cmdBuff[1])
 3a0:	93 81       	ldd	r25, Z+3	; 0x03
 3a2:	91 30       	cpi	r25, 0x01	; 1
 3a4:	61 f0       	breq	.+24     	; 0x3be <_ZN13SerialManager10ProcessCmdEv+0x24>
 3a6:	30 f0       	brcs	.+12     	; 0x3b4 <_ZN13SerialManager10ProcessCmdEv+0x1a>
 3a8:	ef 01       	movw	r28, r30
 3aa:	92 30       	cpi	r25, 0x02	; 2
 3ac:	71 f0       	breq	.+28     	; 0x3ca <_ZN13SerialManager10ProcessCmdEv+0x30>
 3ae:	93 30       	cpi	r25, 0x03	; 3
 3b0:	c9 f0       	breq	.+50     	; 0x3e4 <_ZN13SerialManager10ProcessCmdEv+0x4a>
 3b2:	2f c0       	rjmp	.+94     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
	{
		case CMD_PAUSE:
			*shouldTx = false;
 3b4:	06 84       	ldd	r0, Z+14	; 0x0e
 3b6:	f7 85       	ldd	r31, Z+15	; 0x0f
 3b8:	e0 2d       	mov	r30, r0
 3ba:	10 82       	st	Z, r1
			break;
 3bc:	2a c0       	rjmp	.+84     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
		case CMD_RESUME:
			*shouldTx = true;
 3be:	06 84       	ldd	r0, Z+14	; 0x0e
 3c0:	f7 85       	ldd	r31, Z+15	; 0x0f
 3c2:	e0 2d       	mov	r30, r0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 83       	st	Z, r24
			break;
 3c8:	24 c0       	rjmp	.+72     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
		case CMD_PWR_CHANGE:
			if(cmdBuff[0] != 2) return; // грешен брой аргументи
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	09 f5       	brne	.+66     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
			if(cmdBuff[2] & (1<<7)) return; // неправилна стойност
 3d0:	64 81       	ldd	r22, Z+4	; 0x04
 3d2:	66 23       	and	r22, r22
 3d4:	f4 f0       	brlt	.+60     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
			radio->SetPowerLevel(cmdBuff[2]);
 3d6:	84 85       	ldd	r24, Z+12	; 0x0c
 3d8:	95 85       	ldd	r25, Z+13	; 0x0d
 3da:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN6Si446313SetPowerLevelEh>
			PwrChangedMsg();
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN13SerialManager13PwrChangedMsgEv>
		case CMD_GPS:
			if(cmdBuff[0] != 9) return; // неправилен брой аргументи
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	89 30       	cpi	r24, 0x09	; 9
 3e8:	a1 f4       	brne	.+40     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
			*lat = *((int32*)(cmdBuff+2));
 3ea:	e8 89       	ldd	r30, Y+16	; 0x10
 3ec:	f9 89       	ldd	r31, Y+17	; 0x11
 3ee:	8c 81       	ldd	r24, Y+4	; 0x04
 3f0:	9d 81       	ldd	r25, Y+5	; 0x05
 3f2:	ae 81       	ldd	r26, Y+6	; 0x06
 3f4:	bf 81       	ldd	r27, Y+7	; 0x07
 3f6:	80 83       	st	Z, r24
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	a2 83       	std	Z+2, r26	; 0x02
 3fc:	b3 83       	std	Z+3, r27	; 0x03
			*lon = *((int32*)(cmdBuff+6));
 3fe:	ea 89       	ldd	r30, Y+18	; 0x12
 400:	fb 89       	ldd	r31, Y+19	; 0x13
 402:	88 85       	ldd	r24, Y+8	; 0x08
 404:	99 85       	ldd	r25, Y+9	; 0x09
 406:	aa 85       	ldd	r26, Y+10	; 0x0a
 408:	bb 85       	ldd	r27, Y+11	; 0x0b
 40a:	80 83       	st	Z, r24
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	a2 83       	std	Z+2, r26	; 0x02
 410:	b3 83       	std	Z+3, r27	; 0x03
			break;
	}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <_ZN13SerialManager11CheckForCmdEv>:
	UsartSend((char)MSG_PWR);
	UsartSend((char)*pwrLevel);
 }

 void SerialManager::CheckForCmd()
 {
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	1f 92       	push	r1
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	7c 01       	movw	r14, r24
	char c;
	while(UsartRead(&c)) // докато има
	{
		if(c != SERIAL_IN_HEADER) continue; // ignore

		while(!UsartRead(cmdBuff)); // дължина		
 430:	8c 01       	movw	r16, r24
 432:	0e 5f       	subi	r16, 0xFE	; 254
 434:	1f 4f       	sbci	r17, 0xFF	; 255

		if(cmdBuff[0] == 0) continue; // празна команда
		if(cmdBuff[0] > 9) continue; // overflow

		while(!UsartRead(cmdBuff + 1, cmdBuff[0])); // командата
 436:	6c 01       	movw	r12, r24
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	c8 0e       	add	r12, r24
 43c:	d1 1c       	adc	r13, r1
 }

 void SerialManager::CheckForCmd()
 {
	char c;
	while(UsartRead(&c)) // докато има
 43e:	18 c0       	rjmp	.+48     	; 0x470 <_ZN13SerialManager11CheckForCmdEv+0x58>
	{
		if(c != SERIAL_IN_HEADER) continue; // ignore
 440:	99 81       	ldd	r25, Y+1	; 0x01
 442:	9f 3f       	cpi	r25, 0xFF	; 255
 444:	a9 f4       	brne	.+42     	; 0x470 <_ZN13SerialManager11CheckForCmdEv+0x58>

		while(!UsartRead(cmdBuff)); // дължина		
 446:	c8 01       	movw	r24, r16
 448:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z9UsartReadPc>
 44c:	88 23       	and	r24, r24
 44e:	d9 f3       	breq	.-10     	; 0x446 <_ZN13SerialManager11CheckForCmdEv+0x2e>

		if(cmdBuff[0] == 0) continue; // празна команда
 450:	f7 01       	movw	r30, r14
 452:	82 81       	ldd	r24, Z+2	; 0x02
 454:	81 50       	subi	r24, 0x01	; 1
 456:	89 30       	cpi	r24, 0x09	; 9
 458:	58 f4       	brcc	.+22     	; 0x470 <_ZN13SerialManager11CheckForCmdEv+0x58>
		if(cmdBuff[0] > 9) continue; // overflow

		while(!UsartRead(cmdBuff + 1, cmdBuff[0])); // командата
 45a:	f7 01       	movw	r30, r14
 45c:	62 81       	ldd	r22, Z+2	; 0x02
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	c6 01       	movw	r24, r12
 462:	0e 94 77 05 	call	0xaee	; 0xaee <_Z9UsartReadPci>
 466:	88 23       	and	r24, r24
 468:	c1 f3       	breq	.-16     	; 0x45a <_ZN13SerialManager11CheckForCmdEv+0x42>
		ProcessCmd();
 46a:	c7 01       	movw	r24, r14
 46c:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN13SerialManager10ProcessCmdEv>
 }

 void SerialManager::CheckForCmd()
 {
	char c;
	while(UsartRead(&c)) // докато има
 470:	ce 01       	movw	r24, r28
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z9UsartReadPc>
 478:	81 11       	cpse	r24, r1
 47a:	e2 cf       	rjmp	.-60     	; 0x440 <_ZN13SerialManager11CheckForCmdEv+0x28>
		if(cmdBuff[0] > 9) continue; // overflow

		while(!UsartRead(cmdBuff + 1, cmdBuff[0])); // командата
		ProcessCmd();
	}
 }
 47c:	0f 90       	pop	r0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	08 95       	ret

00000490 <_ZN6Si4463C1EPVhhS1_h>:
	CsnLow();
	SpiExchange(FRR_D_READ);
	ubyte retVal = SpiExchange(0xFF);
	CsnHigh();
	return retVal;
}
 490:	0f 93       	push	r16
 492:	fc 01       	movw	r30, r24
 494:	73 83       	std	Z+3, r23	; 0x03
 496:	62 83       	std	Z+2, r22	; 0x02
 498:	46 83       	std	Z+6, r20	; 0x06
 49a:	35 83       	std	Z+5, r19	; 0x05
 49c:	24 83       	std	Z+4, r18	; 0x04
 49e:	07 83       	std	Z+7, r16	; 0x07
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <_ZN6Si44635ResetEv>:
 4a4:	fc 01       	movw	r30, r24
 4a6:	a4 81       	ldd	r26, Z+4	; 0x04
 4a8:	b5 81       	ldd	r27, Z+5	; 0x05
 4aa:	4c 91       	ld	r20, X
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	c9 01       	movw	r24, r18
 4b2:	07 80       	ldd	r0, Z+7	; 0x07
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <_ZN6Si44635ResetEv+0x16>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <_ZN6Si44635ResetEv+0x12>
 4be:	84 2b       	or	r24, r20
 4c0:	8c 93       	st	X, r24
 4c2:	85 e8       	ldi	r24, 0x85	; 133
 4c4:	8a 95       	dec	r24
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <_ZN6Si44635ResetEv+0x20>
 4c8:	00 00       	nop
 4ca:	a4 81       	ldd	r26, Z+4	; 0x04
 4cc:	b5 81       	ldd	r27, Z+5	; 0x05
 4ce:	9c 91       	ld	r25, X
 4d0:	a9 01       	movw	r20, r18
 4d2:	07 80       	ldd	r0, Z+7	; 0x07
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <_ZN6Si44635ResetEv+0x36>
 4d6:	44 0f       	add	r20, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <_ZN6Si44635ResetEv+0x32>
 4de:	84 2f       	mov	r24, r20
 4e0:	80 95       	com	r24
 4e2:	89 23       	and	r24, r25
 4e4:	8c 93       	st	X, r24
 4e6:	a2 81       	ldd	r26, Z+2	; 0x02
 4e8:	b3 81       	ldd	r27, Z+3	; 0x03
 4ea:	8c 91       	ld	r24, X
 4ec:	06 80       	ldd	r0, Z+6	; 0x06
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <_ZN6Si44635ResetEv+0x50>
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <_ZN6Si44635ResetEv+0x4c>
 4f8:	28 2b       	or	r18, r24
 4fa:	2c 93       	st	X, r18
 4fc:	08 95       	ret

000004fe <_ZN6Si446310WaitForCtsEv>:
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
 50c:	00 e4       	ldi	r16, 0x40	; 64
 50e:	16 e0       	ldi	r17, 0x06	; 6
 510:	ee 24       	eor	r14, r14
 512:	e3 94       	inc	r14
 514:	f1 2c       	mov	r15, r1
 516:	ea 81       	ldd	r30, Y+2	; 0x02
 518:	fb 81       	ldd	r31, Y+3	; 0x03
 51a:	90 81       	ld	r25, Z
 51c:	97 01       	movw	r18, r14
 51e:	0e 80       	ldd	r0, Y+6	; 0x06
 520:	02 c0       	rjmp	.+4      	; 0x526 <_ZN6Si446310WaitForCtsEv+0x28>
 522:	22 0f       	add	r18, r18
 524:	33 1f       	adc	r19, r19
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <_ZN6Si446310WaitForCtsEv+0x24>
 52a:	82 2f       	mov	r24, r18
 52c:	80 95       	com	r24
 52e:	89 23       	and	r24, r25
 530:	80 83       	st	Z, r24
 532:	84 e4       	ldi	r24, 0x44	; 68
 534:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 53e:	ea 81       	ldd	r30, Y+2	; 0x02
 540:	fb 81       	ldd	r31, Y+3	; 0x03
 542:	90 81       	ld	r25, Z
 544:	97 01       	movw	r18, r14
 546:	0e 80       	ldd	r0, Y+6	; 0x06
 548:	02 c0       	rjmp	.+4      	; 0x54e <_ZN6Si446310WaitForCtsEv+0x50>
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <_ZN6Si446310WaitForCtsEv+0x4c>
 552:	29 2b       	or	r18, r25
 554:	20 83       	st	Z, r18
 556:	8f 3f       	cpi	r24, 0xFF	; 255
 558:	19 f0       	breq	.+6      	; 0x560 <_ZN6Si446310WaitForCtsEv+0x62>
 55a:	01 50       	subi	r16, 0x01	; 1
 55c:	11 09       	sbc	r17, r1
 55e:	d9 f6       	brne	.-74     	; 0x516 <_ZN6Si446310WaitForCtsEv+0x18>
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	8f 3f       	cpi	r24, 0xFF	; 255
 564:	09 f0       	breq	.+2      	; 0x568 <_ZN6Si446310WaitForCtsEv+0x6a>
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	89 2f       	mov	r24, r25
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	08 95       	ret

00000578 <_ZN6Si44637SendCmdEPhh>:
 578:	bf 92       	push	r11
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	7c 01       	movw	r14, r24
 58c:	6b 01       	movw	r12, r22
 58e:	c4 2f       	mov	r28, r20
 590:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6Si446310WaitForCtsEv>
 594:	b8 2e       	mov	r11, r24
 596:	88 23       	and	r24, r24
 598:	a1 f1       	breq	.+104    	; 0x602 <_ZN6Si44637SendCmdEPhh+0x8a>
 59a:	d7 01       	movw	r26, r14
 59c:	12 96       	adiw	r26, 0x02	; 2
 59e:	ed 91       	ld	r30, X+
 5a0:	fc 91       	ld	r31, X
 5a2:	13 97       	sbiw	r26, 0x03	; 3
 5a4:	20 81       	ld	r18, Z
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	16 96       	adiw	r26, 0x06	; 6
 5ac:	0c 90       	ld	r0, X
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_ZN6Si44637SendCmdEPhh+0x3c>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <_ZN6Si44637SendCmdEPhh+0x38>
 5b8:	80 95       	com	r24
 5ba:	82 23       	and	r24, r18
 5bc:	80 83       	st	Z, r24
 5be:	9f ef       	ldi	r25, 0xFF	; 255
 5c0:	9c 0f       	add	r25, r28
 5c2:	cc 23       	and	r28, r28
 5c4:	69 f0       	breq	.+26     	; 0x5e0 <_ZN6Si44637SendCmdEPhh+0x68>
 5c6:	e6 01       	movw	r28, r12
 5c8:	09 2f       	mov	r16, r25
 5ca:	10 e0       	ldi	r17, 0x00	; 0
 5cc:	0f 5f       	subi	r16, 0xFF	; 255
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	0c 0d       	add	r16, r12
 5d2:	1d 1d       	adc	r17, r13
 5d4:	89 91       	ld	r24, Y+
 5d6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 5da:	c0 17       	cp	r28, r16
 5dc:	d1 07       	cpc	r29, r17
 5de:	d1 f7       	brne	.-12     	; 0x5d4 <_ZN6Si44637SendCmdEPhh+0x5c>
 5e0:	d7 01       	movw	r26, r14
 5e2:	12 96       	adiw	r26, 0x02	; 2
 5e4:	ed 91       	ld	r30, X+
 5e6:	fc 91       	ld	r31, X
 5e8:	13 97       	sbiw	r26, 0x03	; 3
 5ea:	80 81       	ld	r24, Z
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	16 96       	adiw	r26, 0x06	; 6
 5f2:	0c 90       	ld	r0, X
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <_ZN6Si44637SendCmdEPhh+0x82>
 5f6:	22 0f       	add	r18, r18
 5f8:	33 1f       	adc	r19, r19
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <_ZN6Si44637SendCmdEPhh+0x7e>
 5fe:	28 2b       	or	r18, r24
 600:	20 83       	st	Z, r18
 602:	8b 2d       	mov	r24, r11
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	08 95       	ret

00000618 <_ZN6Si44634InitEv>:
 618:	cf 92       	push	r12
 61a:	df 92       	push	r13
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	1f 93       	push	r17
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	6c 01       	movw	r12, r24
 628:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z13SpiMasterInitv>
 62c:	c6 01       	movw	r24, r12
 62e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN6Si44635ResetEv>
 632:	8f e1       	ldi	r24, 0x1F	; 31
 634:	9e e4       	ldi	r25, 0x4E	; 78
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <_ZN6Si44634InitEv+0x1e>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <_ZN6Si44634InitEv+0x24>
 63c:	00 00       	nop
 63e:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <cfgTable>
 642:	11 23       	and	r17, r17
 644:	49 f1       	breq	.+82     	; 0x698 <_ZN6Si44634InitEv+0x80>
 646:	e1 2c       	mov	r14, r1
 648:	f1 2c       	mov	r15, r1
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	e9 01       	movw	r28, r18
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	be 01       	movw	r22, r28
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7e 4f       	sbci	r23, 0xFE	; 254
 658:	41 2f       	mov	r20, r17
 65a:	c6 01       	movw	r24, r12
 65c:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN6Si44637SendCmdEPhh>
 660:	81 11       	cpse	r24, r1
 662:	04 c0       	rjmp	.+8      	; 0x66c <_ZN6Si44634InitEv+0x54>
 664:	f6 01       	movw	r30, r12
 666:	f1 82       	std	Z+1, r15	; 0x01
 668:	e0 82       	st	Z, r14
 66a:	17 c0       	rjmp	.+46     	; 0x69a <_ZN6Si44634InitEv+0x82>
 66c:	e1 14       	cp	r14, r1
 66e:	f1 04       	cpc	r15, r1
 670:	31 f4       	brne	.+12     	; 0x67e <_ZN6Si44634InitEv+0x66>
 672:	ef e1       	ldi	r30, 0x1F	; 31
 674:	fe e4       	ldi	r31, 0x4E	; 78
 676:	31 97       	sbiw	r30, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <_ZN6Si44634InitEv+0x5e>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <_ZN6Si44634InitEv+0x64>
 67c:	00 00       	nop
 67e:	ff ef       	ldi	r31, 0xFF	; 255
 680:	ef 1a       	sub	r14, r31
 682:	ff 0a       	sbc	r15, r31
 684:	9e 01       	movw	r18, r28
 686:	21 0f       	add	r18, r17
 688:	31 1d       	adc	r19, r1
 68a:	f9 01       	movw	r30, r18
 68c:	ef 5f       	subi	r30, 0xFF	; 255
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	10 81       	ld	r17, Z
 692:	11 11       	cpse	r17, r1
 694:	dc cf       	rjmp	.-72     	; 0x64e <_ZN6Si44634InitEv+0x36>
 696:	01 c0       	rjmp	.+2      	; 0x69a <_ZN6Si44634InitEv+0x82>
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	cf 90       	pop	r12
 6a8:	08 95       	ret

000006aa <_ZN6Si446311SetPropertyEihPh>:
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	60 97       	sbiw	r28, 0x10	; 16
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	8c 01       	movw	r16, r24
 6c4:	fe 01       	movw	r30, r28
 6c6:	31 96       	adiw	r30, 0x01	; 1
 6c8:	80 e1       	ldi	r24, 0x10	; 16
 6ca:	df 01       	movw	r26, r30
 6cc:	1d 92       	st	X+, r1
 6ce:	8a 95       	dec	r24
 6d0:	e9 f7       	brne	.-6      	; 0x6cc <_ZN6Si446311SetPropertyEihPh+0x22>
 6d2:	81 e1       	ldi	r24, 0x11	; 17
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	7a 83       	std	Y+2, r23	; 0x02
 6d8:	4b 83       	std	Y+3, r20	; 0x03
 6da:	6c 83       	std	Y+4, r22	; 0x04
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	84 0f       	add	r24, r20
 6e0:	44 23       	and	r20, r20
 6e2:	91 f0       	breq	.+36     	; 0x708 <_ZN6Si446311SetPropertyEihPh+0x5e>
 6e4:	a2 2f       	mov	r26, r18
 6e6:	b3 2f       	mov	r27, r19
 6e8:	34 96       	adiw	r30, 0x04	; 4
 6ea:	9e 01       	movw	r18, r28
 6ec:	28 0f       	add	r18, r24
 6ee:	31 1d       	adc	r19, r1
 6f0:	2a 5f       	subi	r18, 0xFA	; 250
 6f2:	3f 4f       	sbci	r19, 0xFF	; 255
 6f4:	9d 91       	ld	r25, X+
 6f6:	91 93       	st	Z+, r25
 6f8:	e2 17       	cp	r30, r18
 6fa:	f3 07       	cpc	r31, r19
 6fc:	d9 f7       	brne	.-10     	; 0x6f4 <_ZN6Si446311SetPropertyEihPh+0x4a>
 6fe:	48 2f       	mov	r20, r24
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	4b 5f       	subi	r20, 0xFB	; 251
 704:	5f 4f       	sbci	r21, 0xFF	; 255
 706:	02 c0       	rjmp	.+4      	; 0x70c <_ZN6Si446311SetPropertyEihPh+0x62>
 708:	44 e0       	ldi	r20, 0x04	; 4
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	be 01       	movw	r22, r28
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	c8 01       	movw	r24, r16
 714:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN6Si44637SendCmdEPhh>
 718:	60 96       	adiw	r28, 0x10	; 16
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	08 95       	ret

0000072e <_ZN6Si446312ReadResponseEPhh>:
 72e:	bf 92       	push	r11
 730:	cf 92       	push	r12
 732:	df 92       	push	r13
 734:	ef 92       	push	r14
 736:	ff 92       	push	r15
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	ec 01       	movw	r28, r24
 742:	7b 01       	movw	r14, r22
 744:	b4 2e       	mov	r11, r20
 746:	00 e4       	ldi	r16, 0x40	; 64
 748:	16 e0       	ldi	r17, 0x06	; 6
 74a:	cc 24       	eor	r12, r12
 74c:	c3 94       	inc	r12
 74e:	d1 2c       	mov	r13, r1
 750:	ea 81       	ldd	r30, Y+2	; 0x02
 752:	fb 81       	ldd	r31, Y+3	; 0x03
 754:	90 81       	ld	r25, Z
 756:	96 01       	movw	r18, r12
 758:	0e 80       	ldd	r0, Y+6	; 0x06
 75a:	02 c0       	rjmp	.+4      	; 0x760 <_ZN6Si446312ReadResponseEPhh+0x32>
 75c:	22 0f       	add	r18, r18
 75e:	33 1f       	adc	r19, r19
 760:	0a 94       	dec	r0
 762:	e2 f7       	brpl	.-8      	; 0x75c <_ZN6Si446312ReadResponseEPhh+0x2e>
 764:	82 2f       	mov	r24, r18
 766:	80 95       	com	r24
 768:	89 23       	and	r24, r25
 76a:	80 83       	st	Z, r24
 76c:	84 e4       	ldi	r24, 0x44	; 68
 76e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 778:	8f 3f       	cpi	r24, 0xFF	; 255
 77a:	21 f4       	brne	.+8      	; 0x784 <_ZN6Si446312ReadResponseEPhh+0x56>
 77c:	8b 0d       	add	r24, r11
 77e:	b1 10       	cpse	r11, r1
 780:	12 c0       	rjmp	.+36     	; 0x7a6 <_ZN6Si446312ReadResponseEPhh+0x78>
 782:	1f c0       	rjmp	.+62     	; 0x7c2 <_ZN6Si446312ReadResponseEPhh+0x94>
 784:	ea 81       	ldd	r30, Y+2	; 0x02
 786:	fb 81       	ldd	r31, Y+3	; 0x03
 788:	20 81       	ld	r18, Z
 78a:	c6 01       	movw	r24, r12
 78c:	0e 80       	ldd	r0, Y+6	; 0x06
 78e:	02 c0       	rjmp	.+4      	; 0x794 <_ZN6Si446312ReadResponseEPhh+0x66>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	0a 94       	dec	r0
 796:	e2 f7       	brpl	.-8      	; 0x790 <_ZN6Si446312ReadResponseEPhh+0x62>
 798:	82 2b       	or	r24, r18
 79a:	80 83       	st	Z, r24
 79c:	01 50       	subi	r16, 0x01	; 1
 79e:	11 09       	sbc	r17, r1
 7a0:	b9 f6       	brne	.-82     	; 0x750 <_ZN6Si446312ReadResponseEPhh+0x22>
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	1c c0       	rjmp	.+56     	; 0x7de <_ZN6Si446312ReadResponseEPhh+0xb0>
 7a6:	87 01       	movw	r16, r14
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	e8 0e       	add	r14, r24
 7ae:	f9 1e       	adc	r15, r25
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 7b6:	f8 01       	movw	r30, r16
 7b8:	81 93       	st	Z+, r24
 7ba:	8f 01       	movw	r16, r30
 7bc:	ee 15       	cp	r30, r14
 7be:	ff 05       	cpc	r31, r15
 7c0:	b9 f7       	brne	.-18     	; 0x7b0 <_ZN6Si446312ReadResponseEPhh+0x82>
 7c2:	ea 81       	ldd	r30, Y+2	; 0x02
 7c4:	fb 81       	ldd	r31, Y+3	; 0x03
 7c6:	20 81       	ld	r18, Z
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 80       	ldd	r0, Y+6	; 0x06
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_ZN6Si446312ReadResponseEPhh+0xa6>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	0a 94       	dec	r0
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <_ZN6Si446312ReadResponseEPhh+0xa2>
 7d8:	82 2b       	or	r24, r18
 7da:	80 83       	st	Z, r24
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
 7ee:	bf 90       	pop	r11
 7f0:	08 95       	ret

000007f2 <_ZN6Si446312GetIntStatusEhhhP9IntStatus>:
 7f2:	ef 92       	push	r14
 7f4:	ff 92       	push	r15
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	00 d0       	rcall	.+0      	; 0x800 <_ZN6Si446312GetIntStatusEhhhP9IntStatus+0xe>
 800:	00 d0       	rcall	.+0      	; 0x802 <_ZN6Si446312GetIntStatusEhhhP9IntStatus+0x10>
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	7c 01       	movw	r14, r24
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	89 83       	std	Y+1, r24	; 0x01
 80c:	6a 83       	std	Y+2, r22	; 0x02
 80e:	4b 83       	std	Y+3, r20	; 0x03
 810:	2c 83       	std	Y+4, r18	; 0x04
 812:	44 e0       	ldi	r20, 0x04	; 4
 814:	be 01       	movw	r22, r28
 816:	6f 5f       	subi	r22, 0xFF	; 255
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	c7 01       	movw	r24, r14
 81c:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN6Si44637SendCmdEPhh>
 820:	88 23       	and	r24, r24
 822:	29 f0       	breq	.+10     	; 0x82e <_ZN6Si446312GetIntStatusEhhhP9IntStatus+0x3c>
 824:	48 e0       	ldi	r20, 0x08	; 8
 826:	b8 01       	movw	r22, r16
 828:	c7 01       	movw	r24, r14
 82a:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN6Si446312ReadResponseEPhh>
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	08 95       	ret

00000844 <_ZN6Si44637StartTxEhhi>:
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	00 d0       	rcall	.+0      	; 0x84a <_ZN6Si44637StartTxEhhi+0x6>
 84a:	00 d0       	rcall	.+0      	; 0x84c <_ZN6Si44637StartTxEhhi+0x8>
 84c:	1f 92       	push	r1
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	fe 01       	movw	r30, r28
 854:	31 96       	adiw	r30, 0x01	; 1
 856:	55 e0       	ldi	r21, 0x05	; 5
 858:	df 01       	movw	r26, r30
 85a:	1d 92       	st	X+, r1
 85c:	5a 95       	dec	r21
 85e:	e9 f7       	brne	.-6      	; 0x85a <_ZN6Si44637StartTxEhhi+0x16>
 860:	51 e3       	ldi	r21, 0x31	; 49
 862:	59 83       	std	Y+1, r21	; 0x01
 864:	6a 83       	std	Y+2, r22	; 0x02
 866:	4b 83       	std	Y+3, r20	; 0x03
 868:	3c 83       	std	Y+4, r19	; 0x04
 86a:	2d 83       	std	Y+5, r18	; 0x05
 86c:	45 e0       	ldi	r20, 0x05	; 5
 86e:	bf 01       	movw	r22, r30
 870:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN6Si44637SendCmdEPhh>
 874:	0f 90       	pop	r0
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <_ZN6Si44637WriteTxEPhh>:
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	7c 01       	movw	r14, r24
 896:	6b 01       	movw	r12, r22
 898:	c4 2f       	mov	r28, r20
 89a:	dc 01       	movw	r26, r24
 89c:	12 96       	adiw	r26, 0x02	; 2
 89e:	ed 91       	ld	r30, X+
 8a0:	fc 91       	ld	r31, X
 8a2:	13 97       	sbiw	r26, 0x03	; 3
 8a4:	20 81       	ld	r18, Z
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	16 96       	adiw	r26, 0x06	; 6
 8ac:	0c 90       	ld	r0, X
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <_ZN6Si44637WriteTxEPhh+0x30>
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	0a 94       	dec	r0
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <_ZN6Si44637WriteTxEPhh+0x2c>
 8b8:	80 95       	com	r24
 8ba:	82 23       	and	r24, r18
 8bc:	80 83       	st	Z, r24
 8be:	86 e6       	ldi	r24, 0x66	; 102
 8c0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	9c 0f       	add	r25, r28
 8c8:	cc 23       	and	r28, r28
 8ca:	69 f0       	breq	.+26     	; 0x8e6 <_ZN6Si44637WriteTxEPhh+0x62>
 8cc:	e6 01       	movw	r28, r12
 8ce:	09 2f       	mov	r16, r25
 8d0:	10 e0       	ldi	r17, 0x00	; 0
 8d2:	0f 5f       	subi	r16, 0xFF	; 255
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	0c 0d       	add	r16, r12
 8d8:	1d 1d       	adc	r17, r13
 8da:	89 91       	ld	r24, Y+
 8dc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z11SpiExchangeh>
 8e0:	c0 17       	cp	r28, r16
 8e2:	d1 07       	cpc	r29, r17
 8e4:	d1 f7       	brne	.-12     	; 0x8da <_ZN6Si44637WriteTxEPhh+0x56>
 8e6:	d7 01       	movw	r26, r14
 8e8:	12 96       	adiw	r26, 0x02	; 2
 8ea:	ed 91       	ld	r30, X+
 8ec:	fc 91       	ld	r31, X
 8ee:	13 97       	sbiw	r26, 0x03	; 3
 8f0:	20 81       	ld	r18, Z
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	16 96       	adiw	r26, 0x06	; 6
 8f8:	0c 90       	ld	r0, X
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	0a 94       	dec	r0
 902:	e2 f7       	brpl	.-8      	; 0x8fc <_ZN6Si44637WriteTxEPhh+0x78>
 904:	82 2b       	or	r24, r18
 906:	80 83       	st	Z, r24
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	1f 91       	pop	r17
 90e:	0f 91       	pop	r16
 910:	ff 90       	pop	r15
 912:	ef 90       	pop	r14
 914:	df 90       	pop	r13
 916:	cf 90       	pop	r12
 918:	08 95       	ret

0000091a <_ZN6Si446311GetPropertyEiPh>:

bool Si4463::GetProperty(int propId, ubyte* value)
{
 91a:	ef 92       	push	r14
 91c:	ff 92       	push	r15
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	00 d0       	rcall	.+0      	; 0x928 <_ZN6Si446311GetPropertyEiPh+0xe>
 928:	00 d0       	rcall	.+0      	; 0x92a <_ZN6Si446311GetPropertyEiPh+0x10>
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	8c 01       	movw	r16, r24
 930:	7a 01       	movw	r14, r20
	ubyte cmdBuff[4] = { GET_PROPERTY, (ubyte)(propId >> 8), 1, (ubyte)(propId & 0xFF) };
 932:	82 e1       	ldi	r24, 0x12	; 18
 934:	89 83       	std	Y+1, r24	; 0x01
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	8b 83       	std	Y+3, r24	; 0x03
 93a:	7a 83       	std	Y+2, r23	; 0x02
 93c:	6c 83       	std	Y+4, r22	; 0x04
	if(!SendCmd(cmdBuff, 4)) return false;
 93e:	44 e0       	ldi	r20, 0x04	; 4
 940:	be 01       	movw	r22, r28
 942:	6f 5f       	subi	r22, 0xFF	; 255
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	c8 01       	movw	r24, r16
 948:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN6Si44637SendCmdEPhh>
 94c:	88 23       	and	r24, r24
 94e:	29 f0       	breq	.+10     	; 0x95a <_ZN6Si446311GetPropertyEiPh+0x40>
	return ReadResponse(value, 1);
 950:	41 e0       	ldi	r20, 0x01	; 1
 952:	b7 01       	movw	r22, r14
 954:	c8 01       	movw	r24, r16
 956:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN6Si446312ReadResponseEPhh>
}
 95a:	0f 90       	pop	r0
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	08 95       	ret

00000970 <_ZN6Si446313GetPowerLevelEPh>:
	ubyte cmdBuff[] = { CHANGE_STATE, newState };
	return SendCmd(cmdBuff, 2);
}

bool Si4463::GetPowerLevel(ubyte* lvl)
{
 970:	ab 01       	movw	r20, r22
	return GetProperty(PA_PWR_LVL, lvl);
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	72 e2       	ldi	r23, 0x22	; 34
 976:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN6Si446311GetPropertyEiPh>
}
 97a:	08 95       	ret

0000097c <_ZN6Si446311SetPropertyEih>:
	if(!SendCmd(cmdBuff, 4)) return false;
	return ReadResponse(value, 1);
}

bool Si4463::SetProperty(int propId, ubyte value)
{
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	00 d0       	rcall	.+0      	; 0x982 <_ZN6Si446311SetPropertyEih+0x6>
 982:	00 d0       	rcall	.+0      	; 0x984 <_ZN6Si446311SetPropertyEih+0x8>
 984:	1f 92       	push	r1
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
	ubyte cmdBuff[5] = { SET_PROPERTY, (ubyte)(propId >> 8), 1, (ubyte)(propId & 0xFF), value };
 98a:	fe 01       	movw	r30, r28
 98c:	31 96       	adiw	r30, 0x01	; 1
 98e:	25 e0       	ldi	r18, 0x05	; 5
 990:	df 01       	movw	r26, r30
 992:	1d 92       	st	X+, r1
 994:	2a 95       	dec	r18
 996:	e9 f7       	brne	.-6      	; 0x992 <_ZN6Si446311SetPropertyEih+0x16>
 998:	21 e1       	ldi	r18, 0x11	; 17
 99a:	29 83       	std	Y+1, r18	; 0x01
 99c:	21 e0       	ldi	r18, 0x01	; 1
 99e:	2b 83       	std	Y+3, r18	; 0x03
 9a0:	7a 83       	std	Y+2, r23	; 0x02
 9a2:	6c 83       	std	Y+4, r22	; 0x04
 9a4:	4d 83       	std	Y+5, r20	; 0x05
	return SendCmd(cmdBuff, 5);
 9a6:	45 e0       	ldi	r20, 0x05	; 5
 9a8:	bf 01       	movw	r22, r30
 9aa:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN6Si44637SendCmdEPhh>
}
 9ae:	0f 90       	pop	r0
 9b0:	0f 90       	pop	r0
 9b2:	0f 90       	pop	r0
 9b4:	0f 90       	pop	r0
 9b6:	0f 90       	pop	r0
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	08 95       	ret

000009be <_ZN6Si446313SetPowerLevelEh>:
{
	return GetProperty(PA_PWR_LVL, lvl);
}

bool Si4463::SetPowerLevel(ubyte newLevel)
{
 9be:	46 2f       	mov	r20, r22
	return SetProperty(PA_PWR_LVL, newLevel);
 9c0:	61 e0       	ldi	r22, 0x01	; 1
 9c2:	72 e2       	ldi	r23, 0x22	; 34
 9c4:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN6Si446311SetPropertyEih>
}
 9c8:	08 95       	ret

000009ca <_Z13SpiMasterInitv>:

 #include "Spi.h"

 void SpiMasterInit()
 {
	 DDRB |= (1<<MOSI_PIN) | (1<<SCK_PIN);
 9ca:	84 b1       	in	r24, 0x04	; 4
 9cc:	88 62       	ori	r24, 0x28	; 40
 9ce:	84 b9       	out	0x04, r24	; 4
	 SPCR |= (1<<SPE) | (1<<MSTR) | SPI_DIV_4;
 9d0:	8c b5       	in	r24, 0x2c	; 44
 9d2:	80 65       	ori	r24, 0x50	; 80
 9d4:	8c bd       	out	0x2c, r24	; 44
 9d6:	08 95       	ret

000009d8 <_Z11SpiExchangeh>:
 }

 ubyte SpiExchange(ubyte value)
 {
	 SPDR = value;
 9d8:	8e bd       	out	0x2e, r24	; 46
	 while(!(SPSR & (1<<SPIF)));
 9da:	0d b4       	in	r0, 0x2d	; 45
 9dc:	07 fe       	sbrs	r0, 7
 9de:	fd cf       	rjmp	.-6      	; 0x9da <_Z11SpiExchangeh+0x2>
	 return SPDR;
 9e0:	8e b5       	in	r24, 0x2e	; 46
 9e2:	08 95       	ret

000009e4 <_Z9UsartInitv>:
	while(ptr >= buff)
	{
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = *ptr--;
	}
}
 9e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 9e8:	8c e0       	ldi	r24, 0x0C	; 12
 9ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 9ee:	e0 ec       	ldi	r30, 0xC0	; 192
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	8d 7f       	andi	r24, 0xFD	; 253
 9f6:	80 83       	st	Z, r24
 9f8:	e1 ec       	ldi	r30, 0xC1	; 193
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	80 81       	ld	r24, Z
 9fe:	88 69       	ori	r24, 0x98	; 152
 a00:	80 83       	st	Z, r24
 a02:	78 94       	sei
 a04:	08 95       	ret

00000a06 <_Z9UsartSendc>:
 a06:	e0 ec       	ldi	r30, 0xC0	; 192
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	90 81       	ld	r25, Z
 a0c:	95 ff       	sbrs	r25, 5
 a0e:	fd cf       	rjmp	.-6      	; 0xa0a <_Z9UsartSendc+0x4>
 a10:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a14:	08 95       	ret

00000a16 <_Z9UsartSendPci>:
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	61 15       	cp	r22, r1
 a1c:	71 05       	cpc	r23, r1
 a1e:	79 f0       	breq	.+30     	; 0xa3e <_Z9UsartSendPci+0x28>
 a20:	dc 01       	movw	r26, r24
 a22:	68 0f       	add	r22, r24
 a24:	79 1f       	adc	r23, r25
 a26:	e0 ec       	ldi	r30, 0xC0	; 192
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	c6 ec       	ldi	r28, 0xC6	; 198
 a2c:	d0 e0       	ldi	r29, 0x00	; 0
 a2e:	90 81       	ld	r25, Z
 a30:	95 ff       	sbrs	r25, 5
 a32:	fd cf       	rjmp	.-6      	; 0xa2e <_Z9UsartSendPci+0x18>
 a34:	9d 91       	ld	r25, X+
 a36:	98 83       	st	Y, r25
 a38:	a6 17       	cp	r26, r22
 a3a:	b7 07       	cpc	r27, r23
 a3c:	c1 f7       	brne	.-16     	; 0xa2e <_Z9UsartSendPci+0x18>
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <__vector_18>:
volatile char rxStart, rxEnd, rxLen;

#define UsartAvailable rxLen

ISR(USART_RX_vect)
{
 a44:	1f 92       	push	r1
 a46:	0f 92       	push	r0
 a48:	0f b6       	in	r0, 0x3f	; 63
 a4a:	0f 92       	push	r0
 a4c:	11 24       	eor	r1, r1
 a4e:	8f 93       	push	r24
 a50:	9f 93       	push	r25
 a52:	ef 93       	push	r30
 a54:	ff 93       	push	r31
	rxBuff[rxEnd++] = UDR0;
 a56:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <rxEnd>
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	8e 0f       	add	r24, r30
 a5e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <rxEnd>
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a68:	ec 5b       	subi	r30, 0xBC	; 188
 a6a:	fd 4f       	sbci	r31, 0xFD	; 253
 a6c:	80 83       	st	Z, r24
	rxEnd &= RX_BUFFER_SIZE - 1;
 a6e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rxEnd>
 a72:	8f 73       	andi	r24, 0x3F	; 63
 a74:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <rxEnd>
	if(rxEnd == rxStart) rxStart++;
 a78:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <rxEnd>
 a7c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <rxStart>
 a80:	98 13       	cpse	r25, r24
 a82:	05 c0       	rjmp	.+10     	; 0xa8e <__vector_18+0x4a>
 a84:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <rxStart>
 a88:	8f 5f       	subi	r24, 0xFF	; 255
 a8a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <rxStart>
	if(!(rxLen & RX_BUFFER_SIZE)) rxLen++;
 a8e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <rxLen>
 a92:	86 fd       	sbrc	r24, 6
 a94:	05 c0       	rjmp	.+10     	; 0xaa0 <__vector_18+0x5c>
 a96:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <rxLen>
 a9a:	8f 5f       	subi	r24, 0xFF	; 255
 a9c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rxLen>
}
 aa0:	ff 91       	pop	r31
 aa2:	ef 91       	pop	r30
 aa4:	9f 91       	pop	r25
 aa6:	8f 91       	pop	r24
 aa8:	0f 90       	pop	r0
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	0f 90       	pop	r0
 aae:	1f 90       	pop	r1
 ab0:	18 95       	reti

00000ab2 <_Z9UsartReadPc>:

bool UsartRead(char* c)
{
 ab2:	dc 01       	movw	r26, r24
	if(rxLen > 0)
 ab4:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <rxLen>
 ab8:	99 23       	and	r25, r25
 aba:	b9 f0       	breq	.+46     	; 0xaea <_Z9UsartReadPc+0x38>
	{
		rxLen--;
 abc:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <rxLen>
 ac0:	91 50       	subi	r25, 0x01	; 1
 ac2:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <rxLen>

		*c = rxBuff[rxStart++];
 ac6:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <rxStart>
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	8e 0f       	add	r24, r30
 ace:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <rxStart>
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	ec 5b       	subi	r30, 0xBC	; 188
 ad6:	fd 4f       	sbci	r31, 0xFD	; 253
 ad8:	80 81       	ld	r24, Z
 ada:	8c 93       	st	X, r24
		rxStart &= RX_BUFFER_SIZE - 1;
 adc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <rxStart>
 ae0:	8f 73       	andi	r24, 0x3F	; 63
 ae2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <rxStart>

		return true;
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	08 95       	ret
	} else return false;
 aea:	80 e0       	ldi	r24, 0x00	; 0
}
 aec:	08 95       	ret

00000aee <_Z9UsartReadPci>:

bool UsartRead(char* buff, int len)
{
 aee:	ac 01       	movw	r20, r24
	if(len > rxLen) return false;
 af0:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <rxLen>
 af4:	30 e0       	ldi	r19, 0x00	; 0
 af6:	26 17       	cp	r18, r22
 af8:	37 07       	cpc	r19, r23
 afa:	14 f1       	brlt	.+68     	; 0xb40 <_Z9UsartReadPci+0x52>
	
	cli();
 afc:	f8 94       	cli
	
	rxLen -= len;
 afe:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <rxLen>
 b02:	96 1b       	sub	r25, r22
 b04:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <rxLen>

	while(len--)
 b08:	61 15       	cp	r22, r1
 b0a:	71 05       	cpc	r23, r1
 b0c:	b1 f0       	breq	.+44     	; 0xb3a <_Z9UsartReadPci+0x4c>
 b0e:	da 01       	movw	r26, r20
 b10:	64 0f       	add	r22, r20
 b12:	75 1f       	adc	r23, r21
	{
		*buff++ = rxBuff[rxStart++];
 b14:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <rxStart>
 b18:	91 e0       	ldi	r25, 0x01	; 1
 b1a:	9e 0f       	add	r25, r30
 b1c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <rxStart>
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	ec 5b       	subi	r30, 0xBC	; 188
 b24:	fd 4f       	sbci	r31, 0xFD	; 253
 b26:	90 81       	ld	r25, Z
 b28:	9d 93       	st	X+, r25
		rxStart &= RX_BUFFER_SIZE - 1;
 b2a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rxStart>
 b2e:	9f 73       	andi	r25, 0x3F	; 63
 b30:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <rxStart>
	
	cli();
	
	rxLen -= len;

	while(len--)
 b34:	a6 17       	cp	r26, r22
 b36:	b7 07       	cpc	r27, r23
 b38:	69 f7       	brne	.-38     	; 0xb14 <_Z9UsartReadPci+0x26>
	{
		*buff++ = rxBuff[rxStart++];
		rxStart &= RX_BUFFER_SIZE - 1;
	}

	sei();
 b3a:	78 94       	sei

	return true;
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	08 95       	ret
	} else return false;
}

bool UsartRead(char* buff, int len)
{
	if(len > rxLen) return false;
 b40:	80 e0       	ldi	r24, 0x00	; 0
	}

	sei();

	return true;
}
 b42:	08 95       	ret

00000b44 <__tablejump2__>:
 b44:	ee 0f       	add	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	05 90       	lpm	r0, Z+
 b4a:	f4 91       	lpm	r31, Z
 b4c:	e0 2d       	mov	r30, r0
 b4e:	09 94       	ijmp

00000b50 <_exit>:
 b50:	f8 94       	cli

00000b52 <__stop_program>:
 b52:	ff cf       	rjmp	.-2      	; 0xb52 <__stop_program>
